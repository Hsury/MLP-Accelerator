// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="MLPHLS_Opt,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.400000,HLS_SYN_LAT=1311,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=10,HLS_SYN_FF=736,HLS_SYN_LUT=1334,HLS_VERSION=2019_2}" *)

module MLPHLS_Opt (
        ap_clk,
        ap_rst_n,
        S_AXIS_TDATA,
        S_AXIS_TVALID,
        S_AXIS_TREADY,
        S_AXIS_TLAST,
        M_AXIS_TDATA,
        M_AXIS_TVALID,
        M_AXIS_TREADY,
        M_AXIS_TLAST
);

parameter    ap_ST_fsm_state1 = 22'd1;
parameter    ap_ST_fsm_state2 = 22'd2;
parameter    ap_ST_fsm_state3 = 22'd4;
parameter    ap_ST_fsm_state4 = 22'd8;
parameter    ap_ST_fsm_state5 = 22'd16;
parameter    ap_ST_fsm_state6 = 22'd32;
parameter    ap_ST_fsm_state7 = 22'd64;
parameter    ap_ST_fsm_state8 = 22'd128;
parameter    ap_ST_fsm_state9 = 22'd256;
parameter    ap_ST_fsm_state10 = 22'd512;
parameter    ap_ST_fsm_state11 = 22'd1024;
parameter    ap_ST_fsm_state12 = 22'd2048;
parameter    ap_ST_fsm_state13 = 22'd4096;
parameter    ap_ST_fsm_state14 = 22'd8192;
parameter    ap_ST_fsm_state15 = 22'd16384;
parameter    ap_ST_fsm_state16 = 22'd32768;
parameter    ap_ST_fsm_state17 = 22'd65536;
parameter    ap_ST_fsm_state18 = 22'd131072;
parameter    ap_ST_fsm_state19 = 22'd262144;
parameter    ap_ST_fsm_state20 = 22'd524288;
parameter    ap_ST_fsm_state21 = 22'd1048576;
parameter    ap_ST_fsm_state22 = 22'd2097152;

input   ap_clk;
input   ap_rst_n;
input  [31:0] S_AXIS_TDATA;
input   S_AXIS_TVALID;
output   S_AXIS_TREADY;
input   S_AXIS_TLAST;
output  [31:0] M_AXIS_TDATA;
output   M_AXIS_TVALID;
input   M_AXIS_TREADY;
output   M_AXIS_TLAST;

reg S_AXIS_TREADY;

 reg    ap_rst_n_inv;
wire   [7:0] SIGLUT_address0;
reg    SIGLUT_ce0;
wire   [7:0] SIGLUT_q0;
wire   [7:0] SIGLUT_address1;
reg    SIGLUT_ce1;
wire   [7:0] SIGLUT_q1;
reg    S_AXIS_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [21:0] ap_CS_fsm;
wire    ap_CS_fsm_state2;
wire   [0:0] icmp_ln64_fu_480_p2;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln72_fu_553_p2;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state11;
wire   [0:0] icmp_ln92_fu_726_p2;
reg    M_AXIS_TDATA_blk_n;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state22;
reg   [31:0] reg_476;
reg    ap_block_state2;
reg    ap_block_state4;
reg    ap_block_state11;
wire   [1:0] word_cnt_fu_486_p2;
reg   [1:0] word_cnt_reg_1142;
wire   [2:0] shl_ln68_1_fu_496_p3;
reg   [2:0] shl_ln68_1_reg_1147;
wire   [2:0] i_fu_510_p2;
wire    ap_CS_fsm_state3;
wire   [1:0] word_cnt_3_fu_559_p2;
reg   [1:0] word_cnt_3_reg_1163;
wire   [2:0] shl_ln76_1_fu_569_p3;
reg   [2:0] shl_ln76_1_reg_1168;
wire   [2:0] i_2_fu_583_p2;
wire    ap_CS_fsm_state5;
wire   [7:0] W11_q0;
reg   [7:0] W11_load_reg_1201;
wire    ap_CS_fsm_state6;
wire   [7:0] W12_q0;
reg   [7:0] W12_load_reg_1206;
wire   [7:0] W11_q1;
reg   [7:0] W11_load_1_reg_1211;
wire   [7:0] W12_q1;
reg   [7:0] W12_load_1_reg_1216;
reg   [7:0] W11_load_2_reg_1241;
wire    ap_CS_fsm_state7;
reg   [7:0] W12_load_2_reg_1246;
reg   [7:0] W11_load_3_reg_1251;
reg   [7:0] W12_load_3_reg_1256;
reg   [7:0] W11_load_4_reg_1281;
wire    ap_CS_fsm_state8;
reg   [7:0] W12_load_4_reg_1286;
reg   [7:0] W11_load_5_reg_1291;
reg   [7:0] W12_load_5_reg_1296;
wire   [15:0] sum11_fu_650_p1;
reg   [15:0] sum11_reg_1321;
wire   [15:0] sum12_fu_653_p1;
reg   [15:0] sum12_reg_1326;
wire   [15:0] sum21_fu_656_p1;
reg   [15:0] sum21_reg_1331;
wire   [15:0] zext_ln119_fu_660_p1;
reg   [15:0] zext_ln119_reg_1336;
wire   [15:0] zext_ln119_1_fu_664_p1;
reg   [15:0] zext_ln119_1_reg_1341;
wire   [15:0] zext_ln105_1_fu_668_p1;
reg   [15:0] zext_ln105_1_reg_1351;
wire   [15:0] zext_ln106_fu_671_p1;
reg   [15:0] zext_ln106_reg_1356;
wire   [15:0] zext_ln105_8_fu_674_p1;
reg   [15:0] zext_ln105_8_reg_1366;
wire   [15:0] zext_ln106_1_fu_677_p1;
reg   [15:0] zext_ln106_1_reg_1371;
wire   [15:0] zext_ln105_9_fu_680_p1;
reg   [15:0] zext_ln105_9_reg_1381;
wire   [15:0] zext_ln106_2_fu_683_p1;
reg   [15:0] zext_ln106_2_reg_1386;
wire   [15:0] zext_ln105_10_fu_686_p1;
reg   [15:0] zext_ln105_10_reg_1396;
wire   [15:0] zext_ln106_3_fu_689_p1;
reg   [15:0] zext_ln106_3_reg_1401;
wire   [15:0] zext_ln105_11_fu_692_p1;
reg   [15:0] zext_ln105_11_reg_1411;
wire   [15:0] zext_ln106_4_fu_695_p1;
reg   [15:0] zext_ln106_4_reg_1416;
wire   [15:0] zext_ln105_12_fu_698_p1;
reg   [15:0] zext_ln105_12_reg_1426;
wire   [15:0] zext_ln106_5_fu_702_p1;
reg   [15:0] zext_ln106_5_reg_1431;
wire   [15:0] zext_ln105_13_fu_706_p1;
reg   [15:0] zext_ln105_13_reg_1441;
wire   [15:0] zext_ln106_6_fu_710_p1;
reg   [15:0] zext_ln106_6_reg_1446;
wire   [6:0] j_fu_720_p2;
reg   [6:0] j_reg_1454;
wire    ap_CS_fsm_state10;
wire    regslice_both_M_AXIS_V_data_U_apdone_blk;
wire   [1:0] word_cnt_4_fu_732_p2;
reg   [1:0] word_cnt_4_reg_1462;
wire   [2:0] shl_ln96_1_fu_742_p3;
reg   [2:0] shl_ln96_1_reg_1467;
wire   [0:0] icmp_ln97_fu_750_p2;
reg   [0:0] icmp_ln97_reg_1472;
wire   [2:0] i_4_fu_762_p2;
wire    ap_CS_fsm_state12;
wire   [15:0] mul_ln105_fu_820_p2;
reg   [15:0] mul_ln105_reg_1488;
wire    ap_CS_fsm_state13;
wire   [15:0] mul_ln106_fu_825_p2;
reg   [15:0] mul_ln106_reg_1493;
wire   [7:0] Data_q1;
reg   [7:0] Data_load_1_reg_1498;
reg   [7:0] Data_load_2_reg_1503;
wire    ap_CS_fsm_state14;
wire   [15:0] mul_ln105_3_fu_834_p2;
reg   [15:0] mul_ln105_3_reg_1508;
wire   [15:0] mul_ln106_3_fu_839_p2;
reg   [15:0] mul_ln106_3_reg_1513;
wire   [15:0] mul_ln105_4_fu_851_p2;
reg   [15:0] mul_ln105_4_reg_1518;
wire    ap_CS_fsm_state15;
wire   [15:0] mul_ln106_4_fu_856_p2;
reg   [15:0] mul_ln106_4_reg_1523;
wire   [15:0] grp_fu_1082_p3;
reg   [15:0] add_ln105_reg_1528;
wire   [7:0] trunc_ln105_1_fu_865_p1;
reg   [7:0] trunc_ln105_1_reg_1533;
wire   [15:0] grp_fu_1068_p3;
reg   [15:0] add_ln105_3_reg_1538;
wire   [7:0] trunc_ln105_3_fu_868_p1;
reg   [7:0] trunc_ln105_3_reg_1543;
wire   [15:0] grp_fu_1089_p3;
reg   [15:0] add_ln106_1_reg_1548;
wire   [7:0] trunc_ln106_1_fu_871_p1;
reg   [7:0] trunc_ln106_1_reg_1553;
wire   [15:0] grp_fu_1075_p3;
reg   [15:0] add_ln106_4_reg_1558;
wire   [7:0] trunc_ln106_3_fu_874_p1;
reg   [7:0] trunc_ln106_3_reg_1563;
wire   [15:0] grp_fu_1096_p3;
reg   [15:0] add_ln105_1_reg_1568;
wire    ap_CS_fsm_state16;
wire   [15:0] grp_fu_1110_p3;
reg   [15:0] add_ln105_4_reg_1573;
wire   [7:0] trunc_ln105_2_fu_887_p1;
reg   [7:0] trunc_ln105_2_reg_1578;
wire   [7:0] add_ln105_7_fu_890_p2;
reg   [7:0] add_ln105_7_reg_1583;
wire   [15:0] grp_fu_1103_p3;
reg   [15:0] add_ln106_2_reg_1588;
wire   [15:0] grp_fu_1117_p3;
reg   [15:0] add_ln106_5_reg_1593;
wire   [7:0] trunc_ln106_2_fu_898_p1;
reg   [7:0] trunc_ln106_2_reg_1598;
wire   [7:0] add_ln106_8_fu_901_p2;
reg   [7:0] add_ln106_8_reg_1603;
reg   [0:0] tmp_3_reg_1608;
wire    ap_CS_fsm_state17;
reg   [7:0] lshr_ln_reg_1613;
reg   [0:0] tmp_4_reg_1618;
reg   [7:0] lshr_ln1_reg_1623;
wire    ap_CS_fsm_state18;
reg   [7:0] sum11_8_reg_1638;
wire    ap_CS_fsm_state19;
reg   [7:0] sum12_8_reg_1643;
reg   [0:0] tmp_5_reg_1648;
wire    ap_CS_fsm_state20;
reg   [7:0] result_reg_1653;
reg   [2:0] W11_address0;
reg    W11_ce0;
reg    W11_we0;
wire   [7:0] W11_d0;
reg   [2:0] W11_address1;
reg    W11_ce1;
reg   [2:0] W12_address0;
reg    W12_ce0;
reg    W12_we0;
wire   [7:0] W12_d0;
reg   [2:0] W12_address1;
reg    W12_ce1;
reg   [2:0] Data_address0;
reg    Data_ce0;
reg    Data_we0;
wire   [7:0] Data_d0;
wire   [7:0] Data_q0;
reg   [2:0] Data_address1;
reg    Data_ce1;
reg   [1:0] word_cnt_0_reg_395;
wire    ap_CS_fsm_state1;
wire   [0:0] icmp_ln67_fu_504_p2;
reg   [2:0] i_0_reg_406;
reg   [1:0] word_cnt_1_reg_417;
wire   [0:0] icmp_ln75_fu_577_p2;
reg   [2:0] i_1_reg_428;
reg   [6:0] j_0_reg_439;
reg   [1:0] word_cnt_2_reg_450;
wire   [0:0] and_ln97_fu_811_p2;
wire   [0:0] icmp_ln95_fu_756_p2;
wire   [0:0] icmp_ln87_fu_714_p2;
reg   [2:0] i_3_reg_461;
wire   [63:0] zext_ln68_fu_548_p1;
wire   [63:0] zext_ln76_fu_621_p1;
wire   [63:0] zext_ln96_fu_800_p1;
wire   [63:0] zext_ln109_fu_1004_p1;
wire   [63:0] zext_ln114_fu_1025_p1;
wire   [0:0] trunc_ln68_fu_492_p1;
wire   [1:0] trunc_ln68_1_fu_516_p1;
wire   [4:0] shl_ln_fu_520_p3;
wire   [31:0] zext_ln68_1_fu_528_p1;
wire   [31:0] lshr_ln68_fu_532_p2;
wire   [2:0] add_ln68_fu_543_p2;
wire   [0:0] trunc_ln76_fu_565_p1;
wire   [1:0] trunc_ln76_1_fu_589_p1;
wire   [4:0] shl_ln1_fu_593_p3;
wire   [31:0] zext_ln76_1_fu_601_p1;
wire   [31:0] lshr_ln76_fu_605_p2;
wire   [2:0] add_ln76_fu_616_p2;
wire   [7:0] trunc_ln83_fu_626_p1;
wire   [7:0] trunc_ln83_1_fu_630_p4;
wire   [7:0] trunc_ln83_2_fu_640_p4;
wire   [0:0] trunc_ln96_fu_738_p1;
wire   [1:0] trunc_ln96_1_fu_768_p1;
wire   [4:0] shl_ln2_fu_772_p3;
wire   [31:0] zext_ln96_1_fu_780_p1;
wire   [31:0] lshr_ln96_fu_784_p2;
wire   [2:0] add_ln96_fu_795_p2;
wire   [0:0] icmp_ln97_1_fu_805_p2;
wire   [7:0] mul_ln105_fu_820_p0;
wire   [15:0] zext_ln105_fu_816_p1;
wire   [7:0] mul_ln105_fu_820_p1;
wire   [7:0] mul_ln106_fu_825_p0;
wire   [7:0] mul_ln106_fu_825_p1;
wire   [7:0] mul_ln105_3_fu_834_p0;
wire   [15:0] zext_ln105_3_fu_830_p1;
wire   [7:0] mul_ln105_3_fu_834_p1;
wire   [7:0] mul_ln106_3_fu_839_p0;
wire   [7:0] mul_ln106_3_fu_839_p1;
wire   [7:0] mul_ln105_4_fu_851_p0;
wire   [15:0] zext_ln105_4_fu_847_p1;
wire   [7:0] mul_ln105_4_fu_851_p1;
wire   [7:0] mul_ln106_4_fu_856_p0;
wire   [7:0] mul_ln106_4_fu_856_p1;
wire   [7:0] trunc_ln105_fu_884_p1;
wire   [7:0] trunc_ln106_fu_895_p1;
(* use_dsp48 = "no" *) wire   [15:0] add_ln105_5_fu_910_p2;
(* use_dsp48 = "no" *) wire   [15:0] add_ln105_2_fu_906_p2;
wire   [7:0] add_ln105_8_fu_914_p2;
(* use_dsp48 = "no" *) wire   [15:0] add_ln106_7_fu_933_p2;
(* use_dsp48 = "no" *) wire   [15:0] add_ln106_3_fu_929_p2;
wire   [7:0] add_ln106_9_fu_937_p2;
wire   [7:0] add_ln106_fu_924_p2;
wire   [15:0] add_ln105_6_fu_918_p2;
wire   [7:0] add_ln109_fu_947_p2;
wire   [15:0] add_ln106_6_fu_941_p2;
wire   [8:0] zext_ln112_fu_988_p1;
wire   [8:0] add_ln110_fu_991_p2;
wire   [8:0] select_ln109_fu_997_p3;
wire   [8:0] zext_ln117_fu_1009_p1;
wire   [8:0] add_ln115_fu_1012_p2;
wire   [8:0] select_ln114_fu_1018_p3;
wire   [15:0] grp_fu_1124_p3;
wire   [7:0] result_1_fu_1052_p2;
wire   [7:0] result_2_fu_1057_p3;
wire   [7:0] grp_fu_1068_p0;
wire   [15:0] zext_ln105_2_fu_844_p1;
wire   [7:0] grp_fu_1068_p1;
wire   [7:0] grp_fu_1075_p0;
wire   [7:0] grp_fu_1075_p1;
wire   [7:0] grp_fu_1082_p0;
wire   [15:0] zext_ln105_5_fu_861_p1;
wire   [7:0] grp_fu_1082_p1;
wire   [7:0] grp_fu_1089_p0;
wire   [7:0] grp_fu_1089_p1;
wire   [7:0] grp_fu_1096_p0;
wire   [15:0] zext_ln105_7_fu_877_p1;
wire   [7:0] grp_fu_1096_p1;
wire   [7:0] grp_fu_1103_p0;
wire   [7:0] grp_fu_1103_p1;
wire   [7:0] grp_fu_1110_p0;
wire   [15:0] zext_ln105_6_fu_880_p1;
wire   [7:0] grp_fu_1110_p1;
wire   [7:0] grp_fu_1110_p2;
wire   [7:0] grp_fu_1117_p0;
wire   [7:0] grp_fu_1117_p1;
wire   [7:0] grp_fu_1117_p2;
wire   [7:0] grp_fu_1124_p0;
wire   [7:0] grp_fu_1124_p1;
wire   [15:0] grp_fu_1132_p3;
wire   [7:0] grp_fu_1132_p0;
wire   [7:0] grp_fu_1132_p1;
wire   [7:0] grp_fu_1132_p2;
reg   [21:0] ap_NS_fsm;
wire    regslice_both_S_AXIS_V_data_U_apdone_blk;
wire   [31:0] S_AXIS_TDATA_int;
wire    S_AXIS_TVALID_int;
reg    S_AXIS_TREADY_int;
wire    regslice_both_S_AXIS_V_data_U_ack_in;
wire    regslice_both_w1_S_AXIS_V_last_U_apdone_blk;
wire    S_AXIS_TLAST_int;
wire    regslice_both_w1_S_AXIS_V_last_U_vld_out;
wire    regslice_both_w1_S_AXIS_V_last_U_ack_in;
wire   [31:0] M_AXIS_TDATA_int;
reg    M_AXIS_TVALID_int;
wire    M_AXIS_TREADY_int;
wire    regslice_both_M_AXIS_V_data_U_vld_out;
wire    regslice_both_w1_M_AXIS_V_last_U_apdone_blk;
wire    M_AXIS_TLAST_int;
wire    regslice_both_w1_M_AXIS_V_last_U_ack_in_dummy;
wire    regslice_both_w1_M_AXIS_V_last_U_vld_out;
wire   [15:0] grp_fu_1124_p00;
wire   [15:0] grp_fu_1132_p00;

// power-on initialization
initial begin
#0 ap_CS_fsm = 22'd1;
end

MLPHLS_Opt_SIGLUT #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
SIGLUT_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(SIGLUT_address0),
    .ce0(SIGLUT_ce0),
    .q0(SIGLUT_q0),
    .address1(SIGLUT_address1),
    .ce1(SIGLUT_ce1),
    .q1(SIGLUT_q1)
);

MLPHLS_Opt_W11 #(
    .DataWidth( 8 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
W11_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(W11_address0),
    .ce0(W11_ce0),
    .we0(W11_we0),
    .d0(W11_d0),
    .q0(W11_q0),
    .address1(W11_address1),
    .ce1(W11_ce1),
    .q1(W11_q1)
);

MLPHLS_Opt_W11 #(
    .DataWidth( 8 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
W12_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(W12_address0),
    .ce0(W12_ce0),
    .we0(W12_we0),
    .d0(W12_d0),
    .q0(W12_q0),
    .address1(W12_address1),
    .ce1(W12_ce1),
    .q1(W12_q1)
);

MLPHLS_Opt_Data #(
    .DataWidth( 8 ),
    .AddressRange( 7 ),
    .AddressWidth( 3 ))
Data_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(Data_address0),
    .ce0(Data_ce0),
    .we0(Data_we0),
    .d0(Data_d0),
    .q0(Data_q0),
    .address1(Data_address1),
    .ce1(Data_ce1),
    .q1(Data_q1)
);

MLPHLS_Opt_mac_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
MLPHLS_Opt_mac_mubkb_U1(
    .din0(grp_fu_1068_p0),
    .din1(grp_fu_1068_p1),
    .din2(mul_ln105_3_reg_1508),
    .dout(grp_fu_1068_p3)
);

MLPHLS_Opt_mac_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
MLPHLS_Opt_mac_mubkb_U2(
    .din0(grp_fu_1075_p0),
    .din1(grp_fu_1075_p1),
    .din2(mul_ln106_3_reg_1513),
    .dout(grp_fu_1075_p3)
);

MLPHLS_Opt_mac_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
MLPHLS_Opt_mac_mubkb_U3(
    .din0(grp_fu_1082_p0),
    .din1(grp_fu_1082_p1),
    .din2(mul_ln105_reg_1488),
    .dout(grp_fu_1082_p3)
);

MLPHLS_Opt_mac_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
MLPHLS_Opt_mac_mubkb_U4(
    .din0(grp_fu_1089_p0),
    .din1(grp_fu_1089_p1),
    .din2(mul_ln106_reg_1493),
    .dout(grp_fu_1089_p3)
);

MLPHLS_Opt_mac_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
MLPHLS_Opt_mac_mubkb_U5(
    .din0(grp_fu_1096_p0),
    .din1(grp_fu_1096_p1),
    .din2(mul_ln105_4_reg_1518),
    .dout(grp_fu_1096_p3)
);

MLPHLS_Opt_mac_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
MLPHLS_Opt_mac_mubkb_U6(
    .din0(grp_fu_1103_p0),
    .din1(grp_fu_1103_p1),
    .din2(mul_ln106_4_reg_1523),
    .dout(grp_fu_1103_p3)
);

MLPHLS_Opt_mac_mucud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
MLPHLS_Opt_mac_mucud_U7(
    .din0(grp_fu_1110_p0),
    .din1(grp_fu_1110_p1),
    .din2(grp_fu_1110_p2),
    .dout(grp_fu_1110_p3)
);

MLPHLS_Opt_mac_mucud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
MLPHLS_Opt_mac_mucud_U8(
    .din0(grp_fu_1117_p0),
    .din1(grp_fu_1117_p1),
    .din2(grp_fu_1117_p2),
    .dout(grp_fu_1117_p3)
);

MLPHLS_Opt_mac_mubkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 16 ),
    .dout_WIDTH( 16 ))
MLPHLS_Opt_mac_mubkb_U9(
    .din0(grp_fu_1124_p0),
    .din1(grp_fu_1124_p1),
    .din2(grp_fu_1132_p3),
    .dout(grp_fu_1124_p3)
);

MLPHLS_Opt_mac_mucud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 8 ),
    .din1_WIDTH( 8 ),
    .din2_WIDTH( 8 ),
    .dout_WIDTH( 16 ))
MLPHLS_Opt_mac_mucud_U10(
    .din0(grp_fu_1132_p0),
    .din1(grp_fu_1132_p1),
    .din2(grp_fu_1132_p2),
    .dout(grp_fu_1132_p3)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_S_AXIS_V_data_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(S_AXIS_TDATA),
    .vld_in(S_AXIS_TVALID),
    .ack_in(regslice_both_S_AXIS_V_data_U_ack_in),
    .data_out(S_AXIS_TDATA_int),
    .vld_out(S_AXIS_TVALID_int),
    .ack_out(S_AXIS_TREADY_int),
    .apdone_blk(regslice_both_S_AXIS_V_data_U_apdone_blk)
);

regslice_both_w1 #(
    .DataWidth( 1 ))
regslice_both_w1_S_AXIS_V_last_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(S_AXIS_TLAST),
    .vld_in(S_AXIS_TVALID),
    .ack_in(regslice_both_w1_S_AXIS_V_last_U_ack_in),
    .data_out(S_AXIS_TLAST_int),
    .vld_out(regslice_both_w1_S_AXIS_V_last_U_vld_out),
    .ack_out(S_AXIS_TREADY_int),
    .apdone_blk(regslice_both_w1_S_AXIS_V_last_U_apdone_blk)
);

regslice_both #(
    .DataWidth( 32 ))
regslice_both_M_AXIS_V_data_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(M_AXIS_TDATA_int),
    .vld_in(M_AXIS_TVALID_int),
    .ack_in(M_AXIS_TREADY_int),
    .data_out(M_AXIS_TDATA),
    .vld_out(regslice_both_M_AXIS_V_data_U_vld_out),
    .ack_out(M_AXIS_TREADY),
    .apdone_blk(regslice_both_M_AXIS_V_data_U_apdone_blk)
);

regslice_both_w1 #(
    .DataWidth( 1 ))
regslice_both_w1_M_AXIS_V_last_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(M_AXIS_TLAST_int),
    .vld_in(M_AXIS_TVALID_int),
    .ack_in(regslice_both_w1_M_AXIS_V_last_U_ack_in_dummy),
    .data_out(M_AXIS_TLAST),
    .vld_out(regslice_both_w1_M_AXIS_V_last_U_vld_out),
    .ack_out(M_AXIS_TREADY),
    .apdone_blk(regslice_both_w1_M_AXIS_V_last_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln67_fu_504_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        i_0_reg_406 <= i_fu_510_p2;
    end else if ((~((icmp_ln64_fu_480_p2 == 1'd0) & (1'b0 == S_AXIS_TVALID_int)) & (icmp_ln64_fu_480_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_0_reg_406 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln75_fu_577_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        i_1_reg_428 <= i_2_fu_583_p2;
    end else if ((~((icmp_ln72_fu_553_p2 == 1'd0) & (1'b0 == S_AXIS_TVALID_int)) & (icmp_ln72_fu_553_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        i_1_reg_428 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln95_fu_756_p2 == 1'd0) & (1'd0 == and_ln97_fu_811_p2) & (1'b1 == ap_CS_fsm_state12))) begin
        i_3_reg_461 <= i_4_fu_762_p2;
    end else if ((~((icmp_ln92_fu_726_p2 == 1'd0) & (1'b0 == S_AXIS_TVALID_int)) & (icmp_ln92_fu_726_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        i_3_reg_461 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == S_AXIS_TVALID_int) & (1'b1 == ap_CS_fsm_state9))) begin
        j_0_reg_439 <= 7'd0;
    end else if (((1'b1 == ap_CS_fsm_state22) & (1'b1 == M_AXIS_TREADY_int))) begin
        j_0_reg_439 <= j_reg_1454;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln67_fu_504_p2 == 1'd1))) begin
        word_cnt_0_reg_395 <= word_cnt_reg_1142;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        word_cnt_0_reg_395 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln64_fu_480_p2 == 1'd0) & (1'b0 == S_AXIS_TVALID_int)) & (icmp_ln64_fu_480_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        word_cnt_1_reg_417 <= 2'd0;
    end else if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln75_fu_577_p2 == 1'd1))) begin
        word_cnt_1_reg_417 <= word_cnt_3_reg_1163;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln87_fu_714_p2 == 1'd0) & (regslice_both_M_AXIS_V_data_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state10))) begin
        word_cnt_2_reg_450 <= 2'd0;
    end else if (((1'b1 == ap_CS_fsm_state12) & ((icmp_ln95_fu_756_p2 == 1'd1) | (1'd1 == and_ln97_fu_811_p2)))) begin
        word_cnt_2_reg_450 <= word_cnt_4_reg_1462;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        Data_load_1_reg_1498 <= Data_q1;
        mul_ln105_reg_1488 <= mul_ln105_fu_820_p2;
        mul_ln106_reg_1493 <= mul_ln106_fu_825_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        Data_load_2_reg_1503 <= Data_q1;
        mul_ln105_3_reg_1508 <= mul_ln105_3_fu_834_p2;
        mul_ln106_3_reg_1513 <= mul_ln106_3_fu_839_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        W11_load_1_reg_1211 <= W11_q1;
        W11_load_reg_1201 <= W11_q0;
        W12_load_1_reg_1216 <= W12_q1;
        W12_load_reg_1206 <= W12_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        W11_load_2_reg_1241 <= W11_q1;
        W11_load_3_reg_1251 <= W11_q0;
        W12_load_2_reg_1246 <= W12_q1;
        W12_load_3_reg_1256 <= W12_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        W11_load_4_reg_1281 <= W11_q1;
        W11_load_5_reg_1291 <= W11_q0;
        W12_load_4_reg_1286 <= W12_q1;
        W12_load_5_reg_1296 <= W12_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        add_ln105_1_reg_1568 <= grp_fu_1096_p3;
        add_ln105_4_reg_1573 <= grp_fu_1110_p3;
        add_ln105_7_reg_1583 <= add_ln105_7_fu_890_p2;
        add_ln106_2_reg_1588 <= grp_fu_1103_p3;
        add_ln106_5_reg_1593 <= grp_fu_1117_p3;
        add_ln106_8_reg_1603 <= add_ln106_8_fu_901_p2;
        trunc_ln105_2_reg_1578 <= trunc_ln105_2_fu_887_p1;
        trunc_ln106_2_reg_1598 <= trunc_ln106_2_fu_898_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        add_ln105_3_reg_1538 <= grp_fu_1068_p3;
        add_ln105_reg_1528 <= grp_fu_1082_p3;
        add_ln106_1_reg_1548 <= grp_fu_1089_p3;
        add_ln106_4_reg_1558 <= grp_fu_1075_p3;
        mul_ln105_4_reg_1518 <= mul_ln105_4_fu_851_p2;
        mul_ln106_4_reg_1523 <= mul_ln106_4_fu_856_p2;
        trunc_ln105_1_reg_1533 <= trunc_ln105_1_fu_865_p1;
        trunc_ln105_3_reg_1543 <= trunc_ln105_3_fu_868_p1;
        trunc_ln106_1_reg_1553 <= trunc_ln106_1_fu_871_p1;
        trunc_ln106_3_reg_1563 <= trunc_ln106_3_fu_874_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln92_fu_726_p2 == 1'd0) & (1'b0 == S_AXIS_TVALID_int)) & (icmp_ln92_fu_726_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        icmp_ln97_reg_1472 <= icmp_ln97_fu_750_p2;
        shl_ln96_1_reg_1467[2] <= shl_ln96_1_fu_742_p3[2];
    end
end

always @ (posedge ap_clk) begin
    if (((regslice_both_M_AXIS_V_data_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state10))) begin
        j_reg_1454 <= j_fu_720_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        lshr_ln1_reg_1623 <= {{add_ln106_6_fu_941_p2[15:8]}};
        lshr_ln_reg_1613 <= {{add_ln105_6_fu_918_p2[15:8]}};
        tmp_3_reg_1608 <= add_ln106_fu_924_p2[32'd7];
        tmp_4_reg_1618 <= add_ln109_fu_947_p2[32'd7];
    end
end

always @ (posedge ap_clk) begin
    if (((~((icmp_ln92_fu_726_p2 == 1'd0) & (1'b0 == S_AXIS_TVALID_int)) & (icmp_ln92_fu_726_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11)) | (~((icmp_ln72_fu_553_p2 == 1'd0) & (1'b0 == S_AXIS_TVALID_int)) & (icmp_ln72_fu_553_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4)) | (~((icmp_ln64_fu_480_p2 == 1'd0) & (1'b0 == S_AXIS_TVALID_int)) & (icmp_ln64_fu_480_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        reg_476 <= S_AXIS_TDATA_int;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        result_reg_1653 <= {{grp_fu_1124_p3[15:8]}};
        tmp_5_reg_1648 <= grp_fu_1124_p3[32'd7];
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln64_fu_480_p2 == 1'd0) & (1'b0 == S_AXIS_TVALID_int)) & (icmp_ln64_fu_480_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        shl_ln68_1_reg_1147[2] <= shl_ln68_1_fu_496_p3[2];
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln72_fu_553_p2 == 1'd0) & (1'b0 == S_AXIS_TVALID_int)) & (icmp_ln72_fu_553_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        shl_ln76_1_reg_1168[2] <= shl_ln76_1_fu_569_p3[2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        sum11_8_reg_1638 <= SIGLUT_q0;
        sum12_8_reg_1643 <= SIGLUT_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == S_AXIS_TVALID_int) & (1'b1 == ap_CS_fsm_state9))) begin
        sum11_reg_1321[7 : 0] <= sum11_fu_650_p1[7 : 0];
        sum12_reg_1326[7 : 0] <= sum12_fu_653_p1[7 : 0];
        sum21_reg_1331[7 : 0] <= sum21_fu_656_p1[7 : 0];
        zext_ln105_10_reg_1396[7 : 0] <= zext_ln105_10_fu_686_p1[7 : 0];
        zext_ln105_11_reg_1411[7 : 0] <= zext_ln105_11_fu_692_p1[7 : 0];
        zext_ln105_12_reg_1426[7 : 0] <= zext_ln105_12_fu_698_p1[7 : 0];
        zext_ln105_13_reg_1441[7 : 0] <= zext_ln105_13_fu_706_p1[7 : 0];
        zext_ln105_1_reg_1351[7 : 0] <= zext_ln105_1_fu_668_p1[7 : 0];
        zext_ln105_8_reg_1366[7 : 0] <= zext_ln105_8_fu_674_p1[7 : 0];
        zext_ln105_9_reg_1381[7 : 0] <= zext_ln105_9_fu_680_p1[7 : 0];
        zext_ln106_1_reg_1371[7 : 0] <= zext_ln106_1_fu_677_p1[7 : 0];
        zext_ln106_2_reg_1386[7 : 0] <= zext_ln106_2_fu_683_p1[7 : 0];
        zext_ln106_3_reg_1401[7 : 0] <= zext_ln106_3_fu_689_p1[7 : 0];
        zext_ln106_4_reg_1416[7 : 0] <= zext_ln106_4_fu_695_p1[7 : 0];
        zext_ln106_5_reg_1431[7 : 0] <= zext_ln106_5_fu_702_p1[7 : 0];
        zext_ln106_6_reg_1446[7 : 0] <= zext_ln106_6_fu_710_p1[7 : 0];
        zext_ln106_reg_1356[7 : 0] <= zext_ln106_fu_671_p1[7 : 0];
        zext_ln119_1_reg_1341[7 : 0] <= zext_ln119_1_fu_664_p1[7 : 0];
        zext_ln119_reg_1336[7 : 0] <= zext_ln119_fu_660_p1[7 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln72_fu_553_p2 == 1'd0) & (1'b0 == S_AXIS_TVALID_int)) & (1'b1 == ap_CS_fsm_state4))) begin
        word_cnt_3_reg_1163 <= word_cnt_3_fu_559_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln92_fu_726_p2 == 1'd0) & (1'b0 == S_AXIS_TVALID_int)) & (1'b1 == ap_CS_fsm_state11))) begin
        word_cnt_4_reg_1462 <= word_cnt_4_fu_732_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((icmp_ln64_fu_480_p2 == 1'd0) & (1'b0 == S_AXIS_TVALID_int)) & (1'b1 == ap_CS_fsm_state2))) begin
        word_cnt_reg_1142 <= word_cnt_fu_486_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        Data_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        Data_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        Data_address0 = zext_ln96_fu_800_p1;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        Data_address0 = 64'd0;
    end else begin
        Data_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        Data_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        Data_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        Data_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        Data_address1 = 64'd1;
    end else begin
        Data_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (~((icmp_ln92_fu_726_p2 == 1'd0) & (1'b0 == S_AXIS_TVALID_int)) & (1'b1 == ap_CS_fsm_state11)))) begin
        Data_ce0 = 1'b1;
    end else begin
        Data_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (~((icmp_ln92_fu_726_p2 == 1'd0) & (1'b0 == S_AXIS_TVALID_int)) & (1'b1 == ap_CS_fsm_state11)))) begin
        Data_ce1 = 1'b1;
    end else begin
        Data_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln95_fu_756_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state12))) begin
        Data_we0 = 1'b1;
    end else begin
        Data_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21))) begin
        M_AXIS_TDATA_blk_n = M_AXIS_TREADY_int;
    end else begin
        M_AXIS_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state21) & (1'b1 == M_AXIS_TREADY_int))) begin
        M_AXIS_TVALID_int = 1'b1;
    end else begin
        M_AXIS_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        SIGLUT_ce0 = 1'b1;
    end else begin
        SIGLUT_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        SIGLUT_ce1 = 1'b1;
    end else begin
        SIGLUT_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | ((icmp_ln92_fu_726_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11)) | ((icmp_ln72_fu_553_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4)) | ((icmp_ln64_fu_480_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        S_AXIS_TDATA_blk_n = S_AXIS_TVALID_int;
    end else begin
        S_AXIS_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((regslice_both_S_AXIS_V_data_U_ack_in == 1'b1) & (1'b1 == S_AXIS_TVALID))) begin
        S_AXIS_TREADY = 1'b1;
    end else begin
        S_AXIS_TREADY = 1'b0;
    end
end

always @ (*) begin
    if (((~((icmp_ln92_fu_726_p2 == 1'd0) & (1'b0 == S_AXIS_TVALID_int)) & (icmp_ln92_fu_726_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11)) | ((1'b1 == S_AXIS_TVALID_int) & (1'b1 == ap_CS_fsm_state9)) | (~((icmp_ln72_fu_553_p2 == 1'd0) & (1'b0 == S_AXIS_TVALID_int)) & (icmp_ln72_fu_553_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4)) | (~((icmp_ln64_fu_480_p2 == 1'd0) & (1'b0 == S_AXIS_TVALID_int)) & (icmp_ln64_fu_480_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2)))) begin
        S_AXIS_TREADY_int = 1'b1;
    end else begin
        S_AXIS_TREADY_int = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        W11_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        W11_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        W11_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        W11_address0 = 64'd0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        W11_address0 = zext_ln68_fu_548_p1;
    end else begin
        W11_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        W11_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        W11_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        W11_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        W11_address1 = 64'd1;
    end else begin
        W11_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state3) | (~((icmp_ln72_fu_553_p2 == 1'd0) & (1'b0 == S_AXIS_TVALID_int)) & (1'b1 == ap_CS_fsm_state4)))) begin
        W11_ce0 = 1'b1;
    end else begin
        W11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (~((icmp_ln72_fu_553_p2 == 1'd0) & (1'b0 == S_AXIS_TVALID_int)) & (1'b1 == ap_CS_fsm_state4)))) begin
        W11_ce1 = 1'b1;
    end else begin
        W11_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln67_fu_504_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        W11_we0 = 1'b1;
    end else begin
        W11_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        W12_address0 = 64'd7;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        W12_address0 = 64'd5;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        W12_address0 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        W12_address0 = zext_ln76_fu_621_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        W12_address0 = 64'd0;
    end else begin
        W12_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        W12_address1 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        W12_address1 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        W12_address1 = 64'd2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        W12_address1 = 64'd1;
    end else begin
        W12_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (~((icmp_ln72_fu_553_p2 == 1'd0) & (1'b0 == S_AXIS_TVALID_int)) & (1'b1 == ap_CS_fsm_state4)))) begin
        W12_ce0 = 1'b1;
    end else begin
        W12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (~((icmp_ln72_fu_553_p2 == 1'd0) & (1'b0 == S_AXIS_TVALID_int)) & (1'b1 == ap_CS_fsm_state4)))) begin
        W12_ce1 = 1'b1;
    end else begin
        W12_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln75_fu_577_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        W12_we0 = 1'b1;
    end else begin
        W12_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            if ((~((icmp_ln64_fu_480_p2 == 1'd0) & (1'b0 == S_AXIS_TVALID_int)) & (icmp_ln64_fu_480_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else if ((~((icmp_ln64_fu_480_p2 == 1'd0) & (1'b0 == S_AXIS_TVALID_int)) & (icmp_ln64_fu_480_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (icmp_ln67_fu_504_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if ((~((icmp_ln72_fu_553_p2 == 1'd0) & (1'b0 == S_AXIS_TVALID_int)) & (icmp_ln72_fu_553_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else if ((~((icmp_ln72_fu_553_p2 == 1'd0) & (1'b0 == S_AXIS_TVALID_int)) & (icmp_ln72_fu_553_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (icmp_ln75_fu_577_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == S_AXIS_TVALID_int) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((regslice_both_M_AXIS_V_data_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state10) & (icmp_ln87_fu_714_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((icmp_ln87_fu_714_p2 == 1'd0) & (regslice_both_M_AXIS_V_data_U_apdone_blk == 1'b0) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if ((~((icmp_ln92_fu_726_p2 == 1'd0) & (1'b0 == S_AXIS_TVALID_int)) & (icmp_ln92_fu_726_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else if ((~((icmp_ln92_fu_726_p2 == 1'd0) & (1'b0 == S_AXIS_TVALID_int)) & (icmp_ln92_fu_726_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            if (((1'b1 == ap_CS_fsm_state12) & ((icmp_ln95_fu_756_p2 == 1'd1) | (1'd1 == and_ln97_fu_811_p2)))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            if (((1'b1 == ap_CS_fsm_state21) & (1'b1 == M_AXIS_TREADY_int))) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            if (((1'b1 == ap_CS_fsm_state22) & (1'b1 == M_AXIS_TREADY_int))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Data_d0 = lshr_ln96_fu_784_p2[7:0];

assign M_AXIS_TDATA_int = result_2_fu_1057_p3;

assign M_AXIS_TLAST_int = 1'd1;

assign M_AXIS_TVALID = regslice_both_M_AXIS_V_data_U_vld_out;

assign SIGLUT_address0 = zext_ln109_fu_1004_p1;

assign SIGLUT_address1 = zext_ln114_fu_1025_p1;

assign W11_d0 = lshr_ln68_fu_532_p2[7:0];

assign W12_d0 = lshr_ln76_fu_605_p2[7:0];

assign add_ln105_2_fu_906_p2 = (add_ln105_1_reg_1568 + add_ln105_reg_1528);

assign add_ln105_5_fu_910_p2 = (add_ln105_4_reg_1573 + add_ln105_3_reg_1538);

assign add_ln105_6_fu_918_p2 = (add_ln105_5_fu_910_p2 + add_ln105_2_fu_906_p2);

assign add_ln105_7_fu_890_p2 = (trunc_ln105_1_reg_1533 + trunc_ln105_fu_884_p1);

assign add_ln105_8_fu_914_p2 = (trunc_ln105_3_reg_1543 + trunc_ln105_2_reg_1578);

assign add_ln106_3_fu_929_p2 = (add_ln106_2_reg_1588 + add_ln106_1_reg_1548);

assign add_ln106_6_fu_941_p2 = (add_ln106_7_fu_933_p2 + add_ln106_3_fu_929_p2);

assign add_ln106_7_fu_933_p2 = (add_ln106_5_reg_1593 + add_ln106_4_reg_1558);

assign add_ln106_8_fu_901_p2 = (trunc_ln106_1_reg_1553 + trunc_ln106_fu_895_p1);

assign add_ln106_9_fu_937_p2 = (trunc_ln106_3_reg_1563 + trunc_ln106_2_reg_1598);

assign add_ln106_fu_924_p2 = (add_ln105_7_reg_1583 + add_ln105_8_fu_914_p2);

assign add_ln109_fu_947_p2 = (add_ln106_8_reg_1603 + add_ln106_9_fu_937_p2);

assign add_ln110_fu_991_p2 = (9'd1 + zext_ln112_fu_988_p1);

assign add_ln115_fu_1012_p2 = (9'd1 + zext_ln117_fu_1009_p1);

assign add_ln68_fu_543_p2 = (i_0_reg_406 + shl_ln68_1_reg_1147);

assign add_ln76_fu_616_p2 = (i_1_reg_428 + shl_ln76_1_reg_1168);

assign add_ln96_fu_795_p2 = (i_3_reg_461 + shl_ln96_1_reg_1467);

assign and_ln97_fu_811_p2 = (icmp_ln97_reg_1472 & icmp_ln97_1_fu_805_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state11 = ((icmp_ln92_fu_726_p2 == 1'd0) & (1'b0 == S_AXIS_TVALID_int));
end

always @ (*) begin
    ap_block_state2 = ((icmp_ln64_fu_480_p2 == 1'd0) & (1'b0 == S_AXIS_TVALID_int));
end

always @ (*) begin
    ap_block_state4 = ((icmp_ln72_fu_553_p2 == 1'd0) & (1'b0 == S_AXIS_TVALID_int));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign grp_fu_1068_p0 = zext_ln105_2_fu_844_p1;

assign grp_fu_1068_p1 = zext_ln105_9_reg_1381;

assign grp_fu_1075_p0 = zext_ln105_2_fu_844_p1;

assign grp_fu_1075_p1 = zext_ln106_2_reg_1386;

assign grp_fu_1082_p0 = zext_ln105_5_fu_861_p1;

assign grp_fu_1082_p1 = zext_ln105_12_reg_1426;

assign grp_fu_1089_p0 = zext_ln105_5_fu_861_p1;

assign grp_fu_1089_p1 = zext_ln106_5_reg_1431;

assign grp_fu_1096_p0 = zext_ln105_7_fu_877_p1;

assign grp_fu_1096_p1 = zext_ln105_8_reg_1366;

assign grp_fu_1103_p0 = zext_ln105_7_fu_877_p1;

assign grp_fu_1103_p1 = zext_ln106_1_reg_1371;

assign grp_fu_1110_p0 = zext_ln105_6_fu_880_p1;

assign grp_fu_1110_p1 = zext_ln105_13_reg_1441;

assign grp_fu_1110_p2 = sum11_reg_1321;

assign grp_fu_1117_p0 = zext_ln105_6_fu_880_p1;

assign grp_fu_1117_p1 = zext_ln106_6_reg_1446;

assign grp_fu_1117_p2 = sum12_reg_1326;

assign grp_fu_1124_p0 = grp_fu_1124_p00;

assign grp_fu_1124_p00 = sum11_8_reg_1638;

assign grp_fu_1124_p1 = zext_ln119_reg_1336;

assign grp_fu_1132_p0 = grp_fu_1132_p00;

assign grp_fu_1132_p00 = sum12_8_reg_1643;

assign grp_fu_1132_p1 = zext_ln119_1_reg_1341;

assign grp_fu_1132_p2 = sum21_reg_1331;

assign i_2_fu_583_p2 = (i_1_reg_428 + 3'd1);

assign i_4_fu_762_p2 = (i_3_reg_461 + 3'd1);

assign i_fu_510_p2 = (i_0_reg_406 + 3'd1);

assign icmp_ln64_fu_480_p2 = ((word_cnt_0_reg_395 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln67_fu_504_p2 = ((i_0_reg_406 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln72_fu_553_p2 = ((word_cnt_1_reg_417 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln75_fu_577_p2 = ((i_1_reg_428 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln87_fu_714_p2 = ((j_0_reg_439 == 7'd64) ? 1'b1 : 1'b0);

assign icmp_ln92_fu_726_p2 = ((word_cnt_2_reg_450 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln95_fu_756_p2 = ((i_3_reg_461 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln97_1_fu_805_p2 = ((i_3_reg_461 == 3'd2) ? 1'b1 : 1'b0);

assign icmp_ln97_fu_750_p2 = ((word_cnt_2_reg_450 == 2'd1) ? 1'b1 : 1'b0);

assign j_fu_720_p2 = (j_0_reg_439 + 7'd1);

assign lshr_ln68_fu_532_p2 = reg_476 >> zext_ln68_1_fu_528_p1;

assign lshr_ln76_fu_605_p2 = reg_476 >> zext_ln76_1_fu_601_p1;

assign lshr_ln96_fu_784_p2 = reg_476 >> zext_ln96_1_fu_780_p1;

assign mul_ln105_3_fu_834_p0 = zext_ln105_3_fu_830_p1;

assign mul_ln105_3_fu_834_p1 = zext_ln105_10_reg_1396;

assign mul_ln105_3_fu_834_p2 = (mul_ln105_3_fu_834_p0 * mul_ln105_3_fu_834_p1);

assign mul_ln105_4_fu_851_p0 = zext_ln105_4_fu_847_p1;

assign mul_ln105_4_fu_851_p1 = zext_ln105_11_reg_1411;

assign mul_ln105_4_fu_851_p2 = (mul_ln105_4_fu_851_p0 * mul_ln105_4_fu_851_p1);

assign mul_ln105_fu_820_p0 = zext_ln105_fu_816_p1;

assign mul_ln105_fu_820_p1 = zext_ln105_1_reg_1351;

assign mul_ln105_fu_820_p2 = (mul_ln105_fu_820_p0 * mul_ln105_fu_820_p1);

assign mul_ln106_3_fu_839_p0 = zext_ln105_3_fu_830_p1;

assign mul_ln106_3_fu_839_p1 = zext_ln106_3_reg_1401;

assign mul_ln106_3_fu_839_p2 = (mul_ln106_3_fu_839_p0 * mul_ln106_3_fu_839_p1);

assign mul_ln106_4_fu_856_p0 = zext_ln105_4_fu_847_p1;

assign mul_ln106_4_fu_856_p1 = zext_ln106_4_reg_1416;

assign mul_ln106_4_fu_856_p2 = (mul_ln106_4_fu_856_p0 * mul_ln106_4_fu_856_p1);

assign mul_ln106_fu_825_p0 = zext_ln105_fu_816_p1;

assign mul_ln106_fu_825_p1 = zext_ln106_reg_1356;

assign mul_ln106_fu_825_p2 = (mul_ln106_fu_825_p0 * mul_ln106_fu_825_p1);

assign result_1_fu_1052_p2 = (8'd1 + result_reg_1653);

assign result_2_fu_1057_p3 = ((tmp_5_reg_1648[0:0] === 1'b1) ? result_1_fu_1052_p2 : result_reg_1653);

assign select_ln109_fu_997_p3 = ((tmp_3_reg_1608[0:0] === 1'b1) ? add_ln110_fu_991_p2 : zext_ln112_fu_988_p1);

assign select_ln114_fu_1018_p3 = ((tmp_4_reg_1618[0:0] === 1'b1) ? add_ln115_fu_1012_p2 : zext_ln117_fu_1009_p1);

assign shl_ln1_fu_593_p3 = {{trunc_ln76_1_fu_589_p1}, {3'd0}};

assign shl_ln2_fu_772_p3 = {{trunc_ln96_1_fu_768_p1}, {3'd0}};

assign shl_ln68_1_fu_496_p3 = {{trunc_ln68_fu_492_p1}, {2'd0}};

assign shl_ln76_1_fu_569_p3 = {{trunc_ln76_fu_565_p1}, {2'd0}};

assign shl_ln96_1_fu_742_p3 = {{trunc_ln96_fu_738_p1}, {2'd0}};

assign shl_ln_fu_520_p3 = {{trunc_ln68_1_fu_516_p1}, {3'd0}};

assign sum11_fu_650_p1 = W11_load_reg_1201;

assign sum12_fu_653_p1 = W12_load_reg_1206;

assign sum21_fu_656_p1 = trunc_ln83_fu_626_p1;

assign trunc_ln105_1_fu_865_p1 = grp_fu_1082_p3[7:0];

assign trunc_ln105_2_fu_887_p1 = grp_fu_1110_p3[7:0];

assign trunc_ln105_3_fu_868_p1 = grp_fu_1068_p3[7:0];

assign trunc_ln105_fu_884_p1 = grp_fu_1096_p3[7:0];

assign trunc_ln106_1_fu_871_p1 = grp_fu_1089_p3[7:0];

assign trunc_ln106_2_fu_898_p1 = grp_fu_1117_p3[7:0];

assign trunc_ln106_3_fu_874_p1 = grp_fu_1075_p3[7:0];

assign trunc_ln106_fu_895_p1 = grp_fu_1103_p3[7:0];

assign trunc_ln68_1_fu_516_p1 = i_0_reg_406[1:0];

assign trunc_ln68_fu_492_p1 = word_cnt_0_reg_395[0:0];

assign trunc_ln76_1_fu_589_p1 = i_1_reg_428[1:0];

assign trunc_ln76_fu_565_p1 = word_cnt_1_reg_417[0:0];

assign trunc_ln83_1_fu_630_p4 = {{S_AXIS_TDATA_int[15:8]}};

assign trunc_ln83_2_fu_640_p4 = {{S_AXIS_TDATA_int[23:16]}};

assign trunc_ln83_fu_626_p1 = S_AXIS_TDATA_int[7:0];

assign trunc_ln96_1_fu_768_p1 = i_3_reg_461[1:0];

assign trunc_ln96_fu_738_p1 = word_cnt_2_reg_450[0:0];

assign word_cnt_3_fu_559_p2 = (word_cnt_1_reg_417 + 2'd1);

assign word_cnt_4_fu_732_p2 = (word_cnt_2_reg_450 + 2'd1);

assign word_cnt_fu_486_p2 = (word_cnt_0_reg_395 + 2'd1);

assign zext_ln105_10_fu_686_p1 = W11_load_4_reg_1281;

assign zext_ln105_11_fu_692_p1 = W11_load_5_reg_1291;

assign zext_ln105_12_fu_698_p1 = W11_q1;

assign zext_ln105_13_fu_706_p1 = W11_q0;

assign zext_ln105_1_fu_668_p1 = W11_load_1_reg_1211;

assign zext_ln105_2_fu_844_p1 = Data_load_2_reg_1503;

assign zext_ln105_3_fu_830_p1 = Data_q0;

assign zext_ln105_4_fu_847_p1 = Data_q1;

assign zext_ln105_5_fu_861_p1 = Data_q0;

assign zext_ln105_6_fu_880_p1 = Data_q1;

assign zext_ln105_7_fu_877_p1 = Data_load_1_reg_1498;

assign zext_ln105_8_fu_674_p1 = W11_load_2_reg_1241;

assign zext_ln105_9_fu_680_p1 = W11_load_3_reg_1251;

assign zext_ln105_fu_816_p1 = Data_q0;

assign zext_ln106_1_fu_677_p1 = W12_load_2_reg_1246;

assign zext_ln106_2_fu_683_p1 = W12_load_3_reg_1256;

assign zext_ln106_3_fu_689_p1 = W12_load_4_reg_1286;

assign zext_ln106_4_fu_695_p1 = W12_load_5_reg_1296;

assign zext_ln106_5_fu_702_p1 = W12_q1;

assign zext_ln106_6_fu_710_p1 = W12_q0;

assign zext_ln106_fu_671_p1 = W12_load_1_reg_1216;

assign zext_ln109_fu_1004_p1 = select_ln109_fu_997_p3;

assign zext_ln112_fu_988_p1 = lshr_ln_reg_1613;

assign zext_ln114_fu_1025_p1 = select_ln114_fu_1018_p3;

assign zext_ln117_fu_1009_p1 = lshr_ln1_reg_1623;

assign zext_ln119_1_fu_664_p1 = trunc_ln83_2_fu_640_p4;

assign zext_ln119_fu_660_p1 = trunc_ln83_1_fu_630_p4;

assign zext_ln68_1_fu_528_p1 = shl_ln_fu_520_p3;

assign zext_ln68_fu_548_p1 = add_ln68_fu_543_p2;

assign zext_ln76_1_fu_601_p1 = shl_ln1_fu_593_p3;

assign zext_ln76_fu_621_p1 = add_ln76_fu_616_p2;

assign zext_ln96_1_fu_780_p1 = shl_ln2_fu_772_p3;

assign zext_ln96_fu_800_p1 = add_ln96_fu_795_p2;

always @ (posedge ap_clk) begin
    shl_ln68_1_reg_1147[1:0] <= 2'b00;
    shl_ln76_1_reg_1168[1:0] <= 2'b00;
    sum11_reg_1321[15:8] <= 8'b00000000;
    sum12_reg_1326[15:8] <= 8'b00000000;
    sum21_reg_1331[15:8] <= 8'b00000000;
    zext_ln119_reg_1336[15:8] <= 8'b00000000;
    zext_ln119_1_reg_1341[15:8] <= 8'b00000000;
    zext_ln105_1_reg_1351[15:8] <= 8'b00000000;
    zext_ln106_reg_1356[15:8] <= 8'b00000000;
    zext_ln105_8_reg_1366[15:8] <= 8'b00000000;
    zext_ln106_1_reg_1371[15:8] <= 8'b00000000;
    zext_ln105_9_reg_1381[15:8] <= 8'b00000000;
    zext_ln106_2_reg_1386[15:8] <= 8'b00000000;
    zext_ln105_10_reg_1396[15:8] <= 8'b00000000;
    zext_ln106_3_reg_1401[15:8] <= 8'b00000000;
    zext_ln105_11_reg_1411[15:8] <= 8'b00000000;
    zext_ln106_4_reg_1416[15:8] <= 8'b00000000;
    zext_ln105_12_reg_1426[15:8] <= 8'b00000000;
    zext_ln106_5_reg_1431[15:8] <= 8'b00000000;
    zext_ln105_13_reg_1441[15:8] <= 8'b00000000;
    zext_ln106_6_reg_1446[15:8] <= 8'b00000000;
    shl_ln96_1_reg_1467[1:0] <= 2'b00;
end

endmodule //MLPHLS_Opt
