-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity MLPHLS_Opt is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    S_AXIS_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    S_AXIS_TVALID : IN STD_LOGIC;
    S_AXIS_TREADY : OUT STD_LOGIC;
    S_AXIS_TLAST : IN STD_LOGIC;
    M_AXIS_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    M_AXIS_TVALID : OUT STD_LOGIC;
    M_AXIS_TREADY : IN STD_LOGIC;
    M_AXIS_TLAST : OUT STD_LOGIC );
end;


architecture behav of MLPHLS_Opt is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "MLPHLS_Opt,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.400000,HLS_SYN_LAT=1311,HLS_SYN_TPT=none,HLS_SYN_MEM=1,HLS_SYN_DSP=10,HLS_SYN_FF=736,HLS_SYN_LUT=1334,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (21 downto 0) := "0000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (21 downto 0) := "0000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (21 downto 0) := "0000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (21 downto 0) := "0000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (21 downto 0) := "0000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (21 downto 0) := "0000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (21 downto 0) := "0000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (21 downto 0) := "0001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (21 downto 0) := "0010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (21 downto 0) := "0100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (21 downto 0) := "1000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal SIGLUT_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal SIGLUT_ce0 : STD_LOGIC;
    signal SIGLUT_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal SIGLUT_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal SIGLUT_ce1 : STD_LOGIC;
    signal SIGLUT_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal S_AXIS_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (21 downto 0) := "0000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln64_fu_480_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal icmp_ln72_fu_553_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal icmp_ln92_fu_726_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal M_AXIS_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal reg_476 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state2 : BOOLEAN;
    signal ap_block_state4 : BOOLEAN;
    signal ap_block_state11 : BOOLEAN;
    signal word_cnt_fu_486_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal word_cnt_reg_1142 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln68_1_fu_496_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln68_1_reg_1147 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_fu_510_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal word_cnt_3_fu_559_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal word_cnt_3_reg_1163 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln76_1_fu_569_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln76_1_reg_1168 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_2_fu_583_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal W11_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal W11_load_reg_1201 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal W12_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal W12_load_reg_1206 : STD_LOGIC_VECTOR (7 downto 0);
    signal W11_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal W11_load_1_reg_1211 : STD_LOGIC_VECTOR (7 downto 0);
    signal W12_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal W12_load_1_reg_1216 : STD_LOGIC_VECTOR (7 downto 0);
    signal W11_load_2_reg_1241 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal W12_load_2_reg_1246 : STD_LOGIC_VECTOR (7 downto 0);
    signal W11_load_3_reg_1251 : STD_LOGIC_VECTOR (7 downto 0);
    signal W12_load_3_reg_1256 : STD_LOGIC_VECTOR (7 downto 0);
    signal W11_load_4_reg_1281 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal W12_load_4_reg_1286 : STD_LOGIC_VECTOR (7 downto 0);
    signal W11_load_5_reg_1291 : STD_LOGIC_VECTOR (7 downto 0);
    signal W12_load_5_reg_1296 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum11_fu_650_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum11_reg_1321 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum12_fu_653_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum12_reg_1326 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum21_fu_656_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sum21_reg_1331 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln119_fu_660_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln119_reg_1336 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln119_1_fu_664_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln119_1_reg_1341 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln105_1_fu_668_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln105_1_reg_1351 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln106_fu_671_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln106_reg_1356 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln105_8_fu_674_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln105_8_reg_1366 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln106_1_fu_677_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln106_1_reg_1371 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln105_9_fu_680_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln105_9_reg_1381 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln106_2_fu_683_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln106_2_reg_1386 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln105_10_fu_686_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln105_10_reg_1396 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln106_3_fu_689_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln106_3_reg_1401 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln105_11_fu_692_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln105_11_reg_1411 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln106_4_fu_695_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln106_4_reg_1416 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln105_12_fu_698_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln105_12_reg_1426 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln106_5_fu_702_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln106_5_reg_1431 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln105_13_fu_706_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln105_13_reg_1441 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln106_6_fu_710_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln106_6_reg_1446 : STD_LOGIC_VECTOR (15 downto 0);
    signal j_fu_720_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal j_reg_1454 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal regslice_both_M_AXIS_V_data_U_apdone_blk : STD_LOGIC;
    signal word_cnt_4_fu_732_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal word_cnt_4_reg_1462 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln96_1_fu_742_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln96_1_reg_1467 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln97_fu_750_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln97_reg_1472 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_4_fu_762_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal mul_ln105_fu_820_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln105_reg_1488 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal mul_ln106_fu_825_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln106_reg_1493 : STD_LOGIC_VECTOR (15 downto 0);
    signal Data_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal Data_load_1_reg_1498 : STD_LOGIC_VECTOR (7 downto 0);
    signal Data_load_2_reg_1503 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal mul_ln105_3_fu_834_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln105_3_reg_1508 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln106_3_fu_839_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln106_3_reg_1513 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln105_4_fu_851_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln105_4_reg_1518 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal mul_ln106_4_fu_856_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln106_4_reg_1523 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1082_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln105_reg_1528 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln105_1_fu_865_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln105_1_reg_1533 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1068_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln105_3_reg_1538 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln105_3_fu_868_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln105_3_reg_1543 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1089_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln106_1_reg_1548 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln106_1_fu_871_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln106_1_reg_1553 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1075_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln106_4_reg_1558 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln106_3_fu_874_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln106_3_reg_1563 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1096_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln105_1_reg_1568 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal grp_fu_1110_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln105_4_reg_1573 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln105_2_fu_887_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln105_2_reg_1578 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln105_7_fu_890_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln105_7_reg_1583 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1103_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln106_2_reg_1588 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1117_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln106_5_reg_1593 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln106_2_fu_898_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln106_2_reg_1598 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln106_8_fu_901_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln106_8_reg_1603 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_3_reg_1608 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal lshr_ln_reg_1613 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_4_reg_1618 : STD_LOGIC_VECTOR (0 downto 0);
    signal lshr_ln1_reg_1623 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal sum11_8_reg_1638 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal sum12_8_reg_1643 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_reg_1648 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal result_reg_1653 : STD_LOGIC_VECTOR (7 downto 0);
    signal W11_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal W11_ce0 : STD_LOGIC;
    signal W11_we0 : STD_LOGIC;
    signal W11_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal W11_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal W11_ce1 : STD_LOGIC;
    signal W12_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal W12_ce0 : STD_LOGIC;
    signal W12_we0 : STD_LOGIC;
    signal W12_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal W12_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal W12_ce1 : STD_LOGIC;
    signal Data_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal Data_ce0 : STD_LOGIC;
    signal Data_we0 : STD_LOGIC;
    signal Data_d0 : STD_LOGIC_VECTOR (7 downto 0);
    signal Data_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal Data_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal Data_ce1 : STD_LOGIC;
    signal word_cnt_0_reg_395 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal icmp_ln67_fu_504_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_0_reg_406 : STD_LOGIC_VECTOR (2 downto 0);
    signal word_cnt_1_reg_417 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln75_fu_577_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_reg_428 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_0_reg_439 : STD_LOGIC_VECTOR (6 downto 0);
    signal word_cnt_2_reg_450 : STD_LOGIC_VECTOR (1 downto 0);
    signal and_ln97_fu_811_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln95_fu_756_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_fu_714_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_3_reg_461 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln68_fu_548_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln76_fu_621_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln96_fu_800_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln109_fu_1004_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln114_fu_1025_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln68_fu_492_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln68_1_fu_516_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln_fu_520_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln68_1_fu_528_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln68_fu_532_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln68_fu_543_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln76_fu_565_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln76_1_fu_589_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln1_fu_593_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln76_1_fu_601_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln76_fu_605_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln76_fu_616_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln83_fu_626_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln83_1_fu_630_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln83_2_fu_640_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln96_fu_738_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln96_1_fu_768_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal shl_ln2_fu_772_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln96_1_fu_780_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal lshr_ln96_fu_784_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln96_fu_795_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln97_1_fu_805_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln105_fu_820_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln105_fu_816_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln105_fu_820_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln106_fu_825_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln106_fu_825_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln105_3_fu_834_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln105_3_fu_830_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln105_3_fu_834_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln106_3_fu_839_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln106_3_fu_839_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln105_4_fu_851_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln105_4_fu_847_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln105_4_fu_851_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln106_4_fu_856_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln106_4_fu_856_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln105_fu_884_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln106_fu_895_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln105_5_fu_910_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln105_5_fu_910_p2 : signal is "no";
    signal add_ln105_2_fu_906_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of add_ln105_2_fu_906_p2 : signal is "no";
    signal add_ln105_8_fu_914_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln106_7_fu_933_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of add_ln106_7_fu_933_p2 : signal is "no";
    signal add_ln106_3_fu_929_p2 : STD_LOGIC_VECTOR (15 downto 0);
    attribute use_dsp48 of add_ln106_3_fu_929_p2 : signal is "no";
    signal add_ln106_9_fu_937_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln106_fu_924_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln105_6_fu_918_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln109_fu_947_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln106_6_fu_941_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln112_fu_988_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln110_fu_991_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln109_fu_997_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln117_fu_1009_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln115_fu_1012_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln114_fu_1018_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_1124_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal result_1_fu_1052_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal result_2_fu_1057_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1068_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln105_2_fu_844_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1068_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1075_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1075_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1082_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln105_5_fu_861_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1082_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1089_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1089_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1096_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln105_7_fu_877_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1096_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1103_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1103_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1110_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln105_6_fu_880_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1110_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1110_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1117_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1117_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1117_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1124_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1124_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1132_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1132_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1132_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_fu_1132_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (21 downto 0);
    signal regslice_both_S_AXIS_V_data_U_apdone_blk : STD_LOGIC;
    signal S_AXIS_TDATA_int : STD_LOGIC_VECTOR (31 downto 0);
    signal S_AXIS_TVALID_int : STD_LOGIC;
    signal S_AXIS_TREADY_int : STD_LOGIC;
    signal regslice_both_S_AXIS_V_data_U_ack_in : STD_LOGIC;
    signal regslice_both_w1_S_AXIS_V_last_U_apdone_blk : STD_LOGIC;
    signal S_AXIS_TLAST_int : STD_LOGIC;
    signal regslice_both_w1_S_AXIS_V_last_U_vld_out : STD_LOGIC;
    signal regslice_both_w1_S_AXIS_V_last_U_ack_in : STD_LOGIC;
    signal M_AXIS_TDATA_int : STD_LOGIC_VECTOR (31 downto 0);
    signal M_AXIS_TVALID_int : STD_LOGIC;
    signal M_AXIS_TREADY_int : STD_LOGIC;
    signal regslice_both_M_AXIS_V_data_U_vld_out : STD_LOGIC;
    signal regslice_both_w1_M_AXIS_V_last_U_apdone_blk : STD_LOGIC;
    signal M_AXIS_TLAST_int : STD_LOGIC;
    signal regslice_both_w1_M_AXIS_V_last_U_ack_in_dummy : STD_LOGIC;
    signal regslice_both_w1_M_AXIS_V_last_U_vld_out : STD_LOGIC;
    signal grp_fu_1124_p00 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fu_1132_p00 : STD_LOGIC_VECTOR (15 downto 0);

    component MLPHLS_Opt_mac_mubkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component MLPHLS_Opt_mac_mucud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (7 downto 0);
        din2 : IN STD_LOGIC_VECTOR (7 downto 0);
        dout : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component MLPHLS_Opt_SIGLUT IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component MLPHLS_Opt_W11 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component MLPHLS_Opt_Data IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (7 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;


    component regslice_both_w1 IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC;
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC;
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    SIGLUT_U : component MLPHLS_Opt_SIGLUT
    generic map (
        DataWidth => 8,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => SIGLUT_address0,
        ce0 => SIGLUT_ce0,
        q0 => SIGLUT_q0,
        address1 => SIGLUT_address1,
        ce1 => SIGLUT_ce1,
        q1 => SIGLUT_q1);

    W11_U : component MLPHLS_Opt_W11
    generic map (
        DataWidth => 8,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => W11_address0,
        ce0 => W11_ce0,
        we0 => W11_we0,
        d0 => W11_d0,
        q0 => W11_q0,
        address1 => W11_address1,
        ce1 => W11_ce1,
        q1 => W11_q1);

    W12_U : component MLPHLS_Opt_W11
    generic map (
        DataWidth => 8,
        AddressRange => 8,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => W12_address0,
        ce0 => W12_ce0,
        we0 => W12_we0,
        d0 => W12_d0,
        q0 => W12_q0,
        address1 => W12_address1,
        ce1 => W12_ce1,
        q1 => W12_q1);

    Data_U : component MLPHLS_Opt_Data
    generic map (
        DataWidth => 8,
        AddressRange => 7,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => Data_address0,
        ce0 => Data_ce0,
        we0 => Data_we0,
        d0 => Data_d0,
        q0 => Data_q0,
        address1 => Data_address1,
        ce1 => Data_ce1,
        q1 => Data_q1);

    MLPHLS_Opt_mac_mubkb_U1 : component MLPHLS_Opt_mac_mubkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_1068_p0,
        din1 => grp_fu_1068_p1,
        din2 => mul_ln105_3_reg_1508,
        dout => grp_fu_1068_p3);

    MLPHLS_Opt_mac_mubkb_U2 : component MLPHLS_Opt_mac_mubkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_1075_p0,
        din1 => grp_fu_1075_p1,
        din2 => mul_ln106_3_reg_1513,
        dout => grp_fu_1075_p3);

    MLPHLS_Opt_mac_mubkb_U3 : component MLPHLS_Opt_mac_mubkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_1082_p0,
        din1 => grp_fu_1082_p1,
        din2 => mul_ln105_reg_1488,
        dout => grp_fu_1082_p3);

    MLPHLS_Opt_mac_mubkb_U4 : component MLPHLS_Opt_mac_mubkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_1089_p0,
        din1 => grp_fu_1089_p1,
        din2 => mul_ln106_reg_1493,
        dout => grp_fu_1089_p3);

    MLPHLS_Opt_mac_mubkb_U5 : component MLPHLS_Opt_mac_mubkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_1096_p0,
        din1 => grp_fu_1096_p1,
        din2 => mul_ln105_4_reg_1518,
        dout => grp_fu_1096_p3);

    MLPHLS_Opt_mac_mubkb_U6 : component MLPHLS_Opt_mac_mubkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_1103_p0,
        din1 => grp_fu_1103_p1,
        din2 => mul_ln106_4_reg_1523,
        dout => grp_fu_1103_p3);

    MLPHLS_Opt_mac_mucud_U7 : component MLPHLS_Opt_mac_mucud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_1110_p0,
        din1 => grp_fu_1110_p1,
        din2 => grp_fu_1110_p2,
        dout => grp_fu_1110_p3);

    MLPHLS_Opt_mac_mucud_U8 : component MLPHLS_Opt_mac_mucud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_1117_p0,
        din1 => grp_fu_1117_p1,
        din2 => grp_fu_1117_p2,
        dout => grp_fu_1117_p3);

    MLPHLS_Opt_mac_mubkb_U9 : component MLPHLS_Opt_mac_mubkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 16,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_1124_p0,
        din1 => grp_fu_1124_p1,
        din2 => grp_fu_1132_p3,
        dout => grp_fu_1124_p3);

    MLPHLS_Opt_mac_mucud_U10 : component MLPHLS_Opt_mac_mucud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 8,
        din2_WIDTH => 8,
        dout_WIDTH => 16)
    port map (
        din0 => grp_fu_1132_p0,
        din1 => grp_fu_1132_p1,
        din2 => grp_fu_1132_p2,
        dout => grp_fu_1132_p3);

    regslice_both_S_AXIS_V_data_U : component regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => S_AXIS_TDATA,
        vld_in => S_AXIS_TVALID,
        ack_in => regslice_both_S_AXIS_V_data_U_ack_in,
        data_out => S_AXIS_TDATA_int,
        vld_out => S_AXIS_TVALID_int,
        ack_out => S_AXIS_TREADY_int,
        apdone_blk => regslice_both_S_AXIS_V_data_U_apdone_blk);

    regslice_both_w1_S_AXIS_V_last_U : component regslice_both_w1
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => S_AXIS_TLAST,
        vld_in => S_AXIS_TVALID,
        ack_in => regslice_both_w1_S_AXIS_V_last_U_ack_in,
        data_out => S_AXIS_TLAST_int,
        vld_out => regslice_both_w1_S_AXIS_V_last_U_vld_out,
        ack_out => S_AXIS_TREADY_int,
        apdone_blk => regslice_both_w1_S_AXIS_V_last_U_apdone_blk);

    regslice_both_M_AXIS_V_data_U : component regslice_both
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => M_AXIS_TDATA_int,
        vld_in => M_AXIS_TVALID_int,
        ack_in => M_AXIS_TREADY_int,
        data_out => M_AXIS_TDATA,
        vld_out => regslice_both_M_AXIS_V_data_U_vld_out,
        ack_out => M_AXIS_TREADY,
        apdone_blk => regslice_both_M_AXIS_V_data_U_apdone_blk);

    regslice_both_w1_M_AXIS_V_last_U : component regslice_both_w1
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => M_AXIS_TLAST_int,
        vld_in => M_AXIS_TVALID_int,
        ack_in => regslice_both_w1_M_AXIS_V_last_U_ack_in_dummy,
        data_out => M_AXIS_TLAST,
        vld_out => regslice_both_w1_M_AXIS_V_last_U_vld_out,
        ack_out => M_AXIS_TREADY,
        apdone_blk => regslice_both_w1_M_AXIS_V_last_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_406_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln67_fu_504_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_0_reg_406 <= i_fu_510_p2;
            elsif ((not(((icmp_ln64_fu_480_p2 = ap_const_lv1_0) and (ap_const_logic_0 = S_AXIS_TVALID_int))) and (icmp_ln64_fu_480_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_0_reg_406 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_1_reg_428_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln75_fu_577_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                i_1_reg_428 <= i_2_fu_583_p2;
            elsif ((not(((icmp_ln72_fu_553_p2 = ap_const_lv1_0) and (ap_const_logic_0 = S_AXIS_TVALID_int))) and (icmp_ln72_fu_553_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i_1_reg_428 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_3_reg_461_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln95_fu_756_p2 = ap_const_lv1_0) and (ap_const_lv1_0 = and_ln97_fu_811_p2) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
                i_3_reg_461 <= i_4_fu_762_p2;
            elsif ((not(((icmp_ln92_fu_726_p2 = ap_const_lv1_0) and (ap_const_logic_0 = S_AXIS_TVALID_int))) and (icmp_ln92_fu_726_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                i_3_reg_461 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    j_0_reg_439_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = S_AXIS_TVALID_int) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                j_0_reg_439 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state22) and (ap_const_logic_1 = M_AXIS_TREADY_int))) then 
                j_0_reg_439 <= j_reg_1454;
            end if; 
        end if;
    end process;

    word_cnt_0_reg_395_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln67_fu_504_p2 = ap_const_lv1_1))) then 
                word_cnt_0_reg_395 <= word_cnt_reg_1142;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                word_cnt_0_reg_395 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    word_cnt_1_reg_417_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln64_fu_480_p2 = ap_const_lv1_0) and (ap_const_logic_0 = S_AXIS_TVALID_int))) and (icmp_ln64_fu_480_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                word_cnt_1_reg_417 <= ap_const_lv2_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln75_fu_577_p2 = ap_const_lv1_1))) then 
                word_cnt_1_reg_417 <= word_cnt_3_reg_1163;
            end if; 
        end if;
    end process;

    word_cnt_2_reg_450_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln87_fu_714_p2 = ap_const_lv1_0) and (regslice_both_M_AXIS_V_data_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                word_cnt_2_reg_450 <= ap_const_lv2_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state12) and ((icmp_ln95_fu_756_p2 = ap_const_lv1_1) or (ap_const_lv1_1 = and_ln97_fu_811_p2)))) then 
                word_cnt_2_reg_450 <= word_cnt_4_reg_1462;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                Data_load_1_reg_1498 <= Data_q1;
                mul_ln105_reg_1488 <= mul_ln105_fu_820_p2;
                mul_ln106_reg_1493 <= mul_ln106_fu_825_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                Data_load_2_reg_1503 <= Data_q1;
                mul_ln105_3_reg_1508 <= mul_ln105_3_fu_834_p2;
                mul_ln106_3_reg_1513 <= mul_ln106_3_fu_839_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                W11_load_1_reg_1211 <= W11_q1;
                W11_load_reg_1201 <= W11_q0;
                W12_load_1_reg_1216 <= W12_q1;
                W12_load_reg_1206 <= W12_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                W11_load_2_reg_1241 <= W11_q1;
                W11_load_3_reg_1251 <= W11_q0;
                W12_load_2_reg_1246 <= W12_q1;
                W12_load_3_reg_1256 <= W12_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                W11_load_4_reg_1281 <= W11_q1;
                W11_load_5_reg_1291 <= W11_q0;
                W12_load_4_reg_1286 <= W12_q1;
                W12_load_5_reg_1296 <= W12_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                add_ln105_1_reg_1568 <= grp_fu_1096_p3;
                add_ln105_4_reg_1573 <= grp_fu_1110_p3;
                add_ln105_7_reg_1583 <= add_ln105_7_fu_890_p2;
                add_ln106_2_reg_1588 <= grp_fu_1103_p3;
                add_ln106_5_reg_1593 <= grp_fu_1117_p3;
                add_ln106_8_reg_1603 <= add_ln106_8_fu_901_p2;
                trunc_ln105_2_reg_1578 <= trunc_ln105_2_fu_887_p1;
                trunc_ln106_2_reg_1598 <= trunc_ln106_2_fu_898_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                add_ln105_3_reg_1538 <= grp_fu_1068_p3;
                add_ln105_reg_1528 <= grp_fu_1082_p3;
                add_ln106_1_reg_1548 <= grp_fu_1089_p3;
                add_ln106_4_reg_1558 <= grp_fu_1075_p3;
                mul_ln105_4_reg_1518 <= mul_ln105_4_fu_851_p2;
                mul_ln106_4_reg_1523 <= mul_ln106_4_fu_856_p2;
                trunc_ln105_1_reg_1533 <= trunc_ln105_1_fu_865_p1;
                trunc_ln105_3_reg_1543 <= trunc_ln105_3_fu_868_p1;
                trunc_ln106_1_reg_1553 <= trunc_ln106_1_fu_871_p1;
                trunc_ln106_3_reg_1563 <= trunc_ln106_3_fu_874_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln92_fu_726_p2 = ap_const_lv1_0) and (ap_const_logic_0 = S_AXIS_TVALID_int))) and (icmp_ln92_fu_726_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                icmp_ln97_reg_1472 <= icmp_ln97_fu_750_p2;
                    shl_ln96_1_reg_1467(2) <= shl_ln96_1_fu_742_p3(2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((regslice_both_M_AXIS_V_data_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                j_reg_1454 <= j_fu_720_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                lshr_ln1_reg_1623 <= add_ln106_6_fu_941_p2(15 downto 8);
                lshr_ln_reg_1613 <= add_ln105_6_fu_918_p2(15 downto 8);
                tmp_3_reg_1608 <= add_ln106_fu_924_p2(7 downto 7);
                tmp_4_reg_1618 <= add_ln109_fu_947_p2(7 downto 7);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((icmp_ln92_fu_726_p2 = ap_const_lv1_0) and (ap_const_logic_0 = S_AXIS_TVALID_int))) and (icmp_ln92_fu_726_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11)) or (not(((icmp_ln72_fu_553_p2 = ap_const_lv1_0) and (ap_const_logic_0 = S_AXIS_TVALID_int))) and (icmp_ln72_fu_553_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or (not(((icmp_ln64_fu_480_p2 = ap_const_lv1_0) and (ap_const_logic_0 = S_AXIS_TVALID_int))) and (icmp_ln64_fu_480_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then
                reg_476 <= S_AXIS_TDATA_int;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
                result_reg_1653 <= grp_fu_1124_p3(15 downto 8);
                tmp_5_reg_1648 <= grp_fu_1124_p3(7 downto 7);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln64_fu_480_p2 = ap_const_lv1_0) and (ap_const_logic_0 = S_AXIS_TVALID_int))) and (icmp_ln64_fu_480_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    shl_ln68_1_reg_1147(2) <= shl_ln68_1_fu_496_p3(2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln72_fu_553_p2 = ap_const_lv1_0) and (ap_const_logic_0 = S_AXIS_TVALID_int))) and (icmp_ln72_fu_553_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    shl_ln76_1_reg_1168(2) <= shl_ln76_1_fu_569_p3(2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                sum11_8_reg_1638 <= SIGLUT_q0;
                sum12_8_reg_1643 <= SIGLUT_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = S_AXIS_TVALID_int) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    sum11_reg_1321(7 downto 0) <= sum11_fu_650_p1(7 downto 0);
                    sum12_reg_1326(7 downto 0) <= sum12_fu_653_p1(7 downto 0);
                    sum21_reg_1331(7 downto 0) <= sum21_fu_656_p1(7 downto 0);
                    zext_ln105_10_reg_1396(7 downto 0) <= zext_ln105_10_fu_686_p1(7 downto 0);
                    zext_ln105_11_reg_1411(7 downto 0) <= zext_ln105_11_fu_692_p1(7 downto 0);
                    zext_ln105_12_reg_1426(7 downto 0) <= zext_ln105_12_fu_698_p1(7 downto 0);
                    zext_ln105_13_reg_1441(7 downto 0) <= zext_ln105_13_fu_706_p1(7 downto 0);
                    zext_ln105_1_reg_1351(7 downto 0) <= zext_ln105_1_fu_668_p1(7 downto 0);
                    zext_ln105_8_reg_1366(7 downto 0) <= zext_ln105_8_fu_674_p1(7 downto 0);
                    zext_ln105_9_reg_1381(7 downto 0) <= zext_ln105_9_fu_680_p1(7 downto 0);
                    zext_ln106_1_reg_1371(7 downto 0) <= zext_ln106_1_fu_677_p1(7 downto 0);
                    zext_ln106_2_reg_1386(7 downto 0) <= zext_ln106_2_fu_683_p1(7 downto 0);
                    zext_ln106_3_reg_1401(7 downto 0) <= zext_ln106_3_fu_689_p1(7 downto 0);
                    zext_ln106_4_reg_1416(7 downto 0) <= zext_ln106_4_fu_695_p1(7 downto 0);
                    zext_ln106_5_reg_1431(7 downto 0) <= zext_ln106_5_fu_702_p1(7 downto 0);
                    zext_ln106_6_reg_1446(7 downto 0) <= zext_ln106_6_fu_710_p1(7 downto 0);
                    zext_ln106_reg_1356(7 downto 0) <= zext_ln106_fu_671_p1(7 downto 0);
                    zext_ln119_1_reg_1341(7 downto 0) <= zext_ln119_1_fu_664_p1(7 downto 0);
                    zext_ln119_reg_1336(7 downto 0) <= zext_ln119_fu_660_p1(7 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln72_fu_553_p2 = ap_const_lv1_0) and (ap_const_logic_0 = S_AXIS_TVALID_int))) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                word_cnt_3_reg_1163 <= word_cnt_3_fu_559_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln92_fu_726_p2 = ap_const_lv1_0) and (ap_const_logic_0 = S_AXIS_TVALID_int))) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                word_cnt_4_reg_1462 <= word_cnt_4_fu_732_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((icmp_ln64_fu_480_p2 = ap_const_lv1_0) and (ap_const_logic_0 = S_AXIS_TVALID_int))) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                word_cnt_reg_1142 <= word_cnt_fu_486_p2;
            end if;
        end if;
    end process;
    shl_ln68_1_reg_1147(1 downto 0) <= "00";
    shl_ln76_1_reg_1168(1 downto 0) <= "00";
    sum11_reg_1321(15 downto 8) <= "00000000";
    sum12_reg_1326(15 downto 8) <= "00000000";
    sum21_reg_1331(15 downto 8) <= "00000000";
    zext_ln119_reg_1336(15 downto 8) <= "00000000";
    zext_ln119_1_reg_1341(15 downto 8) <= "00000000";
    zext_ln105_1_reg_1351(15 downto 8) <= "00000000";
    zext_ln106_reg_1356(15 downto 8) <= "00000000";
    zext_ln105_8_reg_1366(15 downto 8) <= "00000000";
    zext_ln106_1_reg_1371(15 downto 8) <= "00000000";
    zext_ln105_9_reg_1381(15 downto 8) <= "00000000";
    zext_ln106_2_reg_1386(15 downto 8) <= "00000000";
    zext_ln105_10_reg_1396(15 downto 8) <= "00000000";
    zext_ln106_3_reg_1401(15 downto 8) <= "00000000";
    zext_ln105_11_reg_1411(15 downto 8) <= "00000000";
    zext_ln106_4_reg_1416(15 downto 8) <= "00000000";
    zext_ln105_12_reg_1426(15 downto 8) <= "00000000";
    zext_ln106_5_reg_1431(15 downto 8) <= "00000000";
    zext_ln105_13_reg_1441(15 downto 8) <= "00000000";
    zext_ln106_6_reg_1446(15 downto 8) <= "00000000";
    shl_ln96_1_reg_1467(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_CS_fsm_state2, icmp_ln64_fu_480_p2, ap_CS_fsm_state4, icmp_ln72_fu_553_p2, ap_CS_fsm_state9, ap_CS_fsm_state11, icmp_ln92_fu_726_p2, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state10, regslice_both_M_AXIS_V_data_U_apdone_blk, ap_CS_fsm_state12, icmp_ln67_fu_504_p2, icmp_ln75_fu_577_p2, and_ln97_fu_811_p2, icmp_ln95_fu_756_p2, icmp_ln87_fu_714_p2, S_AXIS_TVALID_int, M_AXIS_TREADY_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state2 => 
                if ((not(((icmp_ln64_fu_480_p2 = ap_const_lv1_0) and (ap_const_logic_0 = S_AXIS_TVALID_int))) and (icmp_ln64_fu_480_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                elsif ((not(((icmp_ln64_fu_480_p2 = ap_const_lv1_0) and (ap_const_logic_0 = S_AXIS_TVALID_int))) and (icmp_ln64_fu_480_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln67_fu_504_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if ((not(((icmp_ln72_fu_553_p2 = ap_const_lv1_0) and (ap_const_logic_0 = S_AXIS_TVALID_int))) and (icmp_ln72_fu_553_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                elsif ((not(((icmp_ln72_fu_553_p2 = ap_const_lv1_0) and (ap_const_logic_0 = S_AXIS_TVALID_int))) and (icmp_ln72_fu_553_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (icmp_ln75_fu_577_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = S_AXIS_TVALID_int) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                if (((regslice_both_M_AXIS_V_data_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state10) and (icmp_ln87_fu_714_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((icmp_ln87_fu_714_p2 = ap_const_lv1_0) and (regslice_both_M_AXIS_V_data_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state11 => 
                if ((not(((icmp_ln92_fu_726_p2 = ap_const_lv1_0) and (ap_const_logic_0 = S_AXIS_TVALID_int))) and (icmp_ln92_fu_726_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                elsif ((not(((icmp_ln92_fu_726_p2 = ap_const_lv1_0) and (ap_const_logic_0 = S_AXIS_TVALID_int))) and (icmp_ln92_fu_726_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and ((icmp_ln95_fu_756_p2 = ap_const_lv1_1) or (ap_const_lv1_1 = and_ln97_fu_811_p2)))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state21) and (ap_const_logic_1 = M_AXIS_TREADY_int))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state22 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state22) and (ap_const_logic_1 = M_AXIS_TREADY_int))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    Data_address0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, zext_ln96_fu_800_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            Data_address0 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            Data_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            Data_address0 <= zext_ln96_fu_800_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            Data_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            Data_address0 <= "XXX";
        end if; 
    end process;


    Data_address1_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            Data_address1 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            Data_address1 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            Data_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            Data_address1 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            Data_address1 <= "XXX";
        end if; 
    end process;


    Data_ce0_assign_proc : process(ap_CS_fsm_state11, icmp_ln92_fu_726_p2, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, S_AXIS_TVALID_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (not(((icmp_ln92_fu_726_p2 = ap_const_lv1_0) and (ap_const_logic_0 = S_AXIS_TVALID_int))) and (ap_const_logic_1 = ap_CS_fsm_state11)))) then 
            Data_ce0 <= ap_const_logic_1;
        else 
            Data_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Data_ce1_assign_proc : process(ap_CS_fsm_state11, icmp_ln92_fu_726_p2, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, S_AXIS_TVALID_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (not(((icmp_ln92_fu_726_p2 = ap_const_lv1_0) and (ap_const_logic_0 = S_AXIS_TVALID_int))) and (ap_const_logic_1 = ap_CS_fsm_state11)))) then 
            Data_ce1 <= ap_const_logic_1;
        else 
            Data_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    Data_d0 <= lshr_ln96_fu_784_p2(8 - 1 downto 0);

    Data_we0_assign_proc : process(ap_CS_fsm_state12, icmp_ln95_fu_756_p2)
    begin
        if (((icmp_ln95_fu_756_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            Data_we0 <= ap_const_logic_1;
        else 
            Data_we0 <= ap_const_logic_0;
        end if; 
    end process;


    M_AXIS_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state21, ap_CS_fsm_state22, M_AXIS_TREADY_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            M_AXIS_TDATA_blk_n <= M_AXIS_TREADY_int;
        else 
            M_AXIS_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    M_AXIS_TDATA_int <= std_logic_vector(IEEE.numeric_std.resize(unsigned(result_2_fu_1057_p3),32));
    M_AXIS_TLAST_int <= ap_const_logic_1;
    M_AXIS_TVALID <= regslice_both_M_AXIS_V_data_U_vld_out;

    M_AXIS_TVALID_int_assign_proc : process(ap_CS_fsm_state21, M_AXIS_TREADY_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) and (ap_const_logic_1 = M_AXIS_TREADY_int))) then 
            M_AXIS_TVALID_int <= ap_const_logic_1;
        else 
            M_AXIS_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;

    SIGLUT_address0 <= zext_ln109_fu_1004_p1(8 - 1 downto 0);
    SIGLUT_address1 <= zext_ln114_fu_1025_p1(8 - 1 downto 0);

    SIGLUT_ce0_assign_proc : process(ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            SIGLUT_ce0 <= ap_const_logic_1;
        else 
            SIGLUT_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    SIGLUT_ce1_assign_proc : process(ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            SIGLUT_ce1 <= ap_const_logic_1;
        else 
            SIGLUT_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    S_AXIS_TDATA_blk_n_assign_proc : process(ap_CS_fsm_state2, icmp_ln64_fu_480_p2, ap_CS_fsm_state4, icmp_ln72_fu_553_p2, ap_CS_fsm_state9, ap_CS_fsm_state11, icmp_ln92_fu_726_p2, S_AXIS_TVALID_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or ((icmp_ln92_fu_726_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((icmp_ln72_fu_553_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((icmp_ln64_fu_480_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            S_AXIS_TDATA_blk_n <= S_AXIS_TVALID_int;
        else 
            S_AXIS_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    S_AXIS_TREADY_assign_proc : process(S_AXIS_TVALID, regslice_both_S_AXIS_V_data_U_ack_in)
    begin
        if (((regslice_both_S_AXIS_V_data_U_ack_in = ap_const_logic_1) and (ap_const_logic_1 = S_AXIS_TVALID))) then 
            S_AXIS_TREADY <= ap_const_logic_1;
        else 
            S_AXIS_TREADY <= ap_const_logic_0;
        end if; 
    end process;


    S_AXIS_TREADY_int_assign_proc : process(ap_CS_fsm_state2, icmp_ln64_fu_480_p2, ap_CS_fsm_state4, icmp_ln72_fu_553_p2, ap_CS_fsm_state9, ap_CS_fsm_state11, icmp_ln92_fu_726_p2, S_AXIS_TVALID_int)
    begin
        if (((not(((icmp_ln92_fu_726_p2 = ap_const_lv1_0) and (ap_const_logic_0 = S_AXIS_TVALID_int))) and (icmp_ln92_fu_726_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11)) or ((ap_const_logic_1 = S_AXIS_TVALID_int) and (ap_const_logic_1 = ap_CS_fsm_state9)) or (not(((icmp_ln72_fu_553_p2 = ap_const_lv1_0) and (ap_const_logic_0 = S_AXIS_TVALID_int))) and (icmp_ln72_fu_553_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4)) or (not(((icmp_ln64_fu_480_p2 = ap_const_lv1_0) and (ap_const_logic_0 = S_AXIS_TVALID_int))) and (icmp_ln64_fu_480_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            S_AXIS_TREADY_int <= ap_const_logic_1;
        else 
            S_AXIS_TREADY_int <= ap_const_logic_0;
        end if; 
    end process;


    W11_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, zext_ln68_fu_548_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            W11_address0 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            W11_address0 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            W11_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            W11_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            W11_address0 <= zext_ln68_fu_548_p1(3 - 1 downto 0);
        else 
            W11_address0 <= "XXX";
        end if; 
    end process;


    W11_address1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            W11_address1 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            W11_address1 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            W11_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            W11_address1 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            W11_address1 <= "XXX";
        end if; 
    end process;


    W11_ce0_assign_proc : process(ap_CS_fsm_state4, icmp_ln72_fu_553_p2, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, S_AXIS_TVALID_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state3) or (not(((icmp_ln72_fu_553_p2 = ap_const_lv1_0) and (ap_const_logic_0 = S_AXIS_TVALID_int))) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            W11_ce0 <= ap_const_logic_1;
        else 
            W11_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    W11_ce1_assign_proc : process(ap_CS_fsm_state4, icmp_ln72_fu_553_p2, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, S_AXIS_TVALID_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (not(((icmp_ln72_fu_553_p2 = ap_const_lv1_0) and (ap_const_logic_0 = S_AXIS_TVALID_int))) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            W11_ce1 <= ap_const_logic_1;
        else 
            W11_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    W11_d0 <= lshr_ln68_fu_532_p2(8 - 1 downto 0);

    W11_we0_assign_proc : process(ap_CS_fsm_state3, icmp_ln67_fu_504_p2)
    begin
        if (((icmp_ln67_fu_504_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            W11_we0 <= ap_const_logic_1;
        else 
            W11_we0 <= ap_const_logic_0;
        end if; 
    end process;


    W12_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, zext_ln76_fu_621_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            W12_address0 <= ap_const_lv64_7(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            W12_address0 <= ap_const_lv64_5(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            W12_address0 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            W12_address0 <= zext_ln76_fu_621_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            W12_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            W12_address0 <= "XXX";
        end if; 
    end process;


    W12_address1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            W12_address1 <= ap_const_lv64_6(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            W12_address1 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            W12_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            W12_address1 <= ap_const_lv64_1(3 - 1 downto 0);
        else 
            W12_address1 <= "XXX";
        end if; 
    end process;


    W12_ce0_assign_proc : process(ap_CS_fsm_state4, icmp_ln72_fu_553_p2, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, S_AXIS_TVALID_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (not(((icmp_ln72_fu_553_p2 = ap_const_lv1_0) and (ap_const_logic_0 = S_AXIS_TVALID_int))) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            W12_ce0 <= ap_const_logic_1;
        else 
            W12_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    W12_ce1_assign_proc : process(ap_CS_fsm_state4, icmp_ln72_fu_553_p2, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, S_AXIS_TVALID_int)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (not(((icmp_ln72_fu_553_p2 = ap_const_lv1_0) and (ap_const_logic_0 = S_AXIS_TVALID_int))) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            W12_ce1 <= ap_const_logic_1;
        else 
            W12_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    W12_d0 <= lshr_ln76_fu_605_p2(8 - 1 downto 0);

    W12_we0_assign_proc : process(ap_CS_fsm_state5, icmp_ln75_fu_577_p2)
    begin
        if (((icmp_ln75_fu_577_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            W12_we0 <= ap_const_logic_1;
        else 
            W12_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln105_2_fu_906_p2 <= std_logic_vector(unsigned(add_ln105_1_reg_1568) + unsigned(add_ln105_reg_1528));
    add_ln105_5_fu_910_p2 <= std_logic_vector(unsigned(add_ln105_4_reg_1573) + unsigned(add_ln105_3_reg_1538));
    add_ln105_6_fu_918_p2 <= std_logic_vector(unsigned(add_ln105_5_fu_910_p2) + unsigned(add_ln105_2_fu_906_p2));
    add_ln105_7_fu_890_p2 <= std_logic_vector(unsigned(trunc_ln105_1_reg_1533) + unsigned(trunc_ln105_fu_884_p1));
    add_ln105_8_fu_914_p2 <= std_logic_vector(unsigned(trunc_ln105_3_reg_1543) + unsigned(trunc_ln105_2_reg_1578));
    add_ln106_3_fu_929_p2 <= std_logic_vector(unsigned(add_ln106_2_reg_1588) + unsigned(add_ln106_1_reg_1548));
    add_ln106_6_fu_941_p2 <= std_logic_vector(unsigned(add_ln106_7_fu_933_p2) + unsigned(add_ln106_3_fu_929_p2));
    add_ln106_7_fu_933_p2 <= std_logic_vector(unsigned(add_ln106_5_reg_1593) + unsigned(add_ln106_4_reg_1558));
    add_ln106_8_fu_901_p2 <= std_logic_vector(unsigned(trunc_ln106_1_reg_1553) + unsigned(trunc_ln106_fu_895_p1));
    add_ln106_9_fu_937_p2 <= std_logic_vector(unsigned(trunc_ln106_3_reg_1563) + unsigned(trunc_ln106_2_reg_1598));
    add_ln106_fu_924_p2 <= std_logic_vector(unsigned(add_ln105_7_reg_1583) + unsigned(add_ln105_8_fu_914_p2));
    add_ln109_fu_947_p2 <= std_logic_vector(unsigned(add_ln106_8_reg_1603) + unsigned(add_ln106_9_fu_937_p2));
    add_ln110_fu_991_p2 <= std_logic_vector(unsigned(ap_const_lv9_1) + unsigned(zext_ln112_fu_988_p1));
    add_ln115_fu_1012_p2 <= std_logic_vector(unsigned(ap_const_lv9_1) + unsigned(zext_ln117_fu_1009_p1));
    add_ln68_fu_543_p2 <= std_logic_vector(unsigned(i_0_reg_406) + unsigned(shl_ln68_1_reg_1147));
    add_ln76_fu_616_p2 <= std_logic_vector(unsigned(i_1_reg_428) + unsigned(shl_ln76_1_reg_1168));
    add_ln96_fu_795_p2 <= std_logic_vector(unsigned(i_3_reg_461) + unsigned(shl_ln96_1_reg_1467));
    and_ln97_fu_811_p2 <= (icmp_ln97_reg_1472 and icmp_ln97_1_fu_805_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state11_assign_proc : process(icmp_ln92_fu_726_p2, S_AXIS_TVALID_int)
    begin
                ap_block_state11 <= ((icmp_ln92_fu_726_p2 = ap_const_lv1_0) and (ap_const_logic_0 = S_AXIS_TVALID_int));
    end process;


    ap_block_state2_assign_proc : process(icmp_ln64_fu_480_p2, S_AXIS_TVALID_int)
    begin
                ap_block_state2 <= ((icmp_ln64_fu_480_p2 = ap_const_lv1_0) and (ap_const_logic_0 = S_AXIS_TVALID_int));
    end process;


    ap_block_state4_assign_proc : process(icmp_ln72_fu_553_p2, S_AXIS_TVALID_int)
    begin
                ap_block_state4 <= ((icmp_ln72_fu_553_p2 = ap_const_lv1_0) and (ap_const_logic_0 = S_AXIS_TVALID_int));
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    grp_fu_1068_p0 <= zext_ln105_2_fu_844_p1(8 - 1 downto 0);
    grp_fu_1068_p1 <= zext_ln105_9_reg_1381(8 - 1 downto 0);
    grp_fu_1075_p0 <= zext_ln105_2_fu_844_p1(8 - 1 downto 0);
    grp_fu_1075_p1 <= zext_ln106_2_reg_1386(8 - 1 downto 0);
    grp_fu_1082_p0 <= zext_ln105_5_fu_861_p1(8 - 1 downto 0);
    grp_fu_1082_p1 <= zext_ln105_12_reg_1426(8 - 1 downto 0);
    grp_fu_1089_p0 <= zext_ln105_5_fu_861_p1(8 - 1 downto 0);
    grp_fu_1089_p1 <= zext_ln106_5_reg_1431(8 - 1 downto 0);
    grp_fu_1096_p0 <= zext_ln105_7_fu_877_p1(8 - 1 downto 0);
    grp_fu_1096_p1 <= zext_ln105_8_reg_1366(8 - 1 downto 0);
    grp_fu_1103_p0 <= zext_ln105_7_fu_877_p1(8 - 1 downto 0);
    grp_fu_1103_p1 <= zext_ln106_1_reg_1371(8 - 1 downto 0);
    grp_fu_1110_p0 <= zext_ln105_6_fu_880_p1(8 - 1 downto 0);
    grp_fu_1110_p1 <= zext_ln105_13_reg_1441(8 - 1 downto 0);
    grp_fu_1110_p2 <= sum11_reg_1321(8 - 1 downto 0);
    grp_fu_1117_p0 <= zext_ln105_6_fu_880_p1(8 - 1 downto 0);
    grp_fu_1117_p1 <= zext_ln106_6_reg_1446(8 - 1 downto 0);
    grp_fu_1117_p2 <= sum12_reg_1326(8 - 1 downto 0);
    grp_fu_1124_p0 <= grp_fu_1124_p00(8 - 1 downto 0);
    grp_fu_1124_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum11_8_reg_1638),16));
    grp_fu_1124_p1 <= zext_ln119_reg_1336(8 - 1 downto 0);
    grp_fu_1132_p0 <= grp_fu_1132_p00(8 - 1 downto 0);
    grp_fu_1132_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum12_8_reg_1643),16));
    grp_fu_1132_p1 <= zext_ln119_1_reg_1341(8 - 1 downto 0);
    grp_fu_1132_p2 <= sum21_reg_1331(8 - 1 downto 0);
    i_2_fu_583_p2 <= std_logic_vector(unsigned(i_1_reg_428) + unsigned(ap_const_lv3_1));
    i_4_fu_762_p2 <= std_logic_vector(unsigned(i_3_reg_461) + unsigned(ap_const_lv3_1));
    i_fu_510_p2 <= std_logic_vector(unsigned(i_0_reg_406) + unsigned(ap_const_lv3_1));
    icmp_ln64_fu_480_p2 <= "1" when (word_cnt_0_reg_395 = ap_const_lv2_2) else "0";
    icmp_ln67_fu_504_p2 <= "1" when (i_0_reg_406 = ap_const_lv3_4) else "0";
    icmp_ln72_fu_553_p2 <= "1" when (word_cnt_1_reg_417 = ap_const_lv2_2) else "0";
    icmp_ln75_fu_577_p2 <= "1" when (i_1_reg_428 = ap_const_lv3_4) else "0";
    icmp_ln87_fu_714_p2 <= "1" when (j_0_reg_439 = ap_const_lv7_40) else "0";
    icmp_ln92_fu_726_p2 <= "1" when (word_cnt_2_reg_450 = ap_const_lv2_2) else "0";
    icmp_ln95_fu_756_p2 <= "1" when (i_3_reg_461 = ap_const_lv3_4) else "0";
    icmp_ln97_1_fu_805_p2 <= "1" when (i_3_reg_461 = ap_const_lv3_2) else "0";
    icmp_ln97_fu_750_p2 <= "1" when (word_cnt_2_reg_450 = ap_const_lv2_1) else "0";
    j_fu_720_p2 <= std_logic_vector(unsigned(j_0_reg_439) + unsigned(ap_const_lv7_1));
    lshr_ln68_fu_532_p2 <= std_logic_vector(shift_right(unsigned(reg_476),to_integer(unsigned('0' & zext_ln68_1_fu_528_p1(31-1 downto 0)))));
    lshr_ln76_fu_605_p2 <= std_logic_vector(shift_right(unsigned(reg_476),to_integer(unsigned('0' & zext_ln76_1_fu_601_p1(31-1 downto 0)))));
    lshr_ln96_fu_784_p2 <= std_logic_vector(shift_right(unsigned(reg_476),to_integer(unsigned('0' & zext_ln96_1_fu_780_p1(31-1 downto 0)))));
    mul_ln105_3_fu_834_p0 <= zext_ln105_3_fu_830_p1(8 - 1 downto 0);
    mul_ln105_3_fu_834_p1 <= zext_ln105_10_reg_1396(8 - 1 downto 0);
    mul_ln105_3_fu_834_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln105_3_fu_834_p0) * unsigned(mul_ln105_3_fu_834_p1), 16));
    mul_ln105_4_fu_851_p0 <= zext_ln105_4_fu_847_p1(8 - 1 downto 0);
    mul_ln105_4_fu_851_p1 <= zext_ln105_11_reg_1411(8 - 1 downto 0);
    mul_ln105_4_fu_851_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln105_4_fu_851_p0) * unsigned(mul_ln105_4_fu_851_p1), 16));
    mul_ln105_fu_820_p0 <= zext_ln105_fu_816_p1(8 - 1 downto 0);
    mul_ln105_fu_820_p1 <= zext_ln105_1_reg_1351(8 - 1 downto 0);
    mul_ln105_fu_820_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln105_fu_820_p0) * unsigned(mul_ln105_fu_820_p1), 16));
    mul_ln106_3_fu_839_p0 <= zext_ln105_3_fu_830_p1(8 - 1 downto 0);
    mul_ln106_3_fu_839_p1 <= zext_ln106_3_reg_1401(8 - 1 downto 0);
    mul_ln106_3_fu_839_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln106_3_fu_839_p0) * unsigned(mul_ln106_3_fu_839_p1), 16));
    mul_ln106_4_fu_856_p0 <= zext_ln105_4_fu_847_p1(8 - 1 downto 0);
    mul_ln106_4_fu_856_p1 <= zext_ln106_4_reg_1416(8 - 1 downto 0);
    mul_ln106_4_fu_856_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln106_4_fu_856_p0) * unsigned(mul_ln106_4_fu_856_p1), 16));
    mul_ln106_fu_825_p0 <= zext_ln105_fu_816_p1(8 - 1 downto 0);
    mul_ln106_fu_825_p1 <= zext_ln106_reg_1356(8 - 1 downto 0);
    mul_ln106_fu_825_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(mul_ln106_fu_825_p0) * unsigned(mul_ln106_fu_825_p1), 16));
    result_1_fu_1052_p2 <= std_logic_vector(unsigned(ap_const_lv8_1) + unsigned(result_reg_1653));
    result_2_fu_1057_p3 <= 
        result_1_fu_1052_p2 when (tmp_5_reg_1648(0) = '1') else 
        result_reg_1653;
    select_ln109_fu_997_p3 <= 
        add_ln110_fu_991_p2 when (tmp_3_reg_1608(0) = '1') else 
        zext_ln112_fu_988_p1;
    select_ln114_fu_1018_p3 <= 
        add_ln115_fu_1012_p2 when (tmp_4_reg_1618(0) = '1') else 
        zext_ln117_fu_1009_p1;
    shl_ln1_fu_593_p3 <= (trunc_ln76_1_fu_589_p1 & ap_const_lv3_0);
    shl_ln2_fu_772_p3 <= (trunc_ln96_1_fu_768_p1 & ap_const_lv3_0);
    shl_ln68_1_fu_496_p3 <= (trunc_ln68_fu_492_p1 & ap_const_lv2_0);
    shl_ln76_1_fu_569_p3 <= (trunc_ln76_fu_565_p1 & ap_const_lv2_0);
    shl_ln96_1_fu_742_p3 <= (trunc_ln96_fu_738_p1 & ap_const_lv2_0);
    shl_ln_fu_520_p3 <= (trunc_ln68_1_fu_516_p1 & ap_const_lv3_0);
    sum11_fu_650_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(W11_load_reg_1201),16));
    sum12_fu_653_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(W12_load_reg_1206),16));
    sum21_fu_656_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln83_fu_626_p1),16));
    trunc_ln105_1_fu_865_p1 <= grp_fu_1082_p3(8 - 1 downto 0);
    trunc_ln105_2_fu_887_p1 <= grp_fu_1110_p3(8 - 1 downto 0);
    trunc_ln105_3_fu_868_p1 <= grp_fu_1068_p3(8 - 1 downto 0);
    trunc_ln105_fu_884_p1 <= grp_fu_1096_p3(8 - 1 downto 0);
    trunc_ln106_1_fu_871_p1 <= grp_fu_1089_p3(8 - 1 downto 0);
    trunc_ln106_2_fu_898_p1 <= grp_fu_1117_p3(8 - 1 downto 0);
    trunc_ln106_3_fu_874_p1 <= grp_fu_1075_p3(8 - 1 downto 0);
    trunc_ln106_fu_895_p1 <= grp_fu_1103_p3(8 - 1 downto 0);
    trunc_ln68_1_fu_516_p1 <= i_0_reg_406(2 - 1 downto 0);
    trunc_ln68_fu_492_p1 <= word_cnt_0_reg_395(1 - 1 downto 0);
    trunc_ln76_1_fu_589_p1 <= i_1_reg_428(2 - 1 downto 0);
    trunc_ln76_fu_565_p1 <= word_cnt_1_reg_417(1 - 1 downto 0);
    trunc_ln83_1_fu_630_p4 <= S_AXIS_TDATA_int(15 downto 8);
    trunc_ln83_2_fu_640_p4 <= S_AXIS_TDATA_int(23 downto 16);
    trunc_ln83_fu_626_p1 <= S_AXIS_TDATA_int(8 - 1 downto 0);
    trunc_ln96_1_fu_768_p1 <= i_3_reg_461(2 - 1 downto 0);
    trunc_ln96_fu_738_p1 <= word_cnt_2_reg_450(1 - 1 downto 0);
    word_cnt_3_fu_559_p2 <= std_logic_vector(unsigned(word_cnt_1_reg_417) + unsigned(ap_const_lv2_1));
    word_cnt_4_fu_732_p2 <= std_logic_vector(unsigned(word_cnt_2_reg_450) + unsigned(ap_const_lv2_1));
    word_cnt_fu_486_p2 <= std_logic_vector(unsigned(word_cnt_0_reg_395) + unsigned(ap_const_lv2_1));
    zext_ln105_10_fu_686_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(W11_load_4_reg_1281),16));
    zext_ln105_11_fu_692_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(W11_load_5_reg_1291),16));
    zext_ln105_12_fu_698_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(W11_q1),16));
    zext_ln105_13_fu_706_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(W11_q0),16));
    zext_ln105_1_fu_668_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(W11_load_1_reg_1211),16));
    zext_ln105_2_fu_844_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Data_load_2_reg_1503),16));
    zext_ln105_3_fu_830_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Data_q0),16));
    zext_ln105_4_fu_847_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Data_q1),16));
    zext_ln105_5_fu_861_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Data_q0),16));
    zext_ln105_6_fu_880_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Data_q1),16));
    zext_ln105_7_fu_877_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Data_load_1_reg_1498),16));
    zext_ln105_8_fu_674_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(W11_load_2_reg_1241),16));
    zext_ln105_9_fu_680_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(W11_load_3_reg_1251),16));
    zext_ln105_fu_816_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Data_q0),16));
    zext_ln106_1_fu_677_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(W12_load_2_reg_1246),16));
    zext_ln106_2_fu_683_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(W12_load_3_reg_1256),16));
    zext_ln106_3_fu_689_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(W12_load_4_reg_1286),16));
    zext_ln106_4_fu_695_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(W12_load_5_reg_1296),16));
    zext_ln106_5_fu_702_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(W12_q1),16));
    zext_ln106_6_fu_710_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(W12_q0),16));
    zext_ln106_fu_671_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(W12_load_1_reg_1216),16));
    zext_ln109_fu_1004_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln109_fu_997_p3),64));
    zext_ln112_fu_988_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln_reg_1613),9));
    zext_ln114_fu_1025_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln114_fu_1018_p3),64));
    zext_ln117_fu_1009_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(lshr_ln1_reg_1623),9));
    zext_ln119_1_fu_664_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln83_2_fu_640_p4),16));
    zext_ln119_fu_660_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln83_1_fu_630_p4),16));
    zext_ln68_1_fu_528_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_520_p3),32));
    zext_ln68_fu_548_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln68_fu_543_p2),64));
    zext_ln76_1_fu_601_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1_fu_593_p3),32));
    zext_ln76_fu_621_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln76_fu_616_p2),64));
    zext_ln96_1_fu_780_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln2_fu_772_p3),32));
    zext_ln96_fu_800_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln96_fu_795_p2),64));
end behav;
