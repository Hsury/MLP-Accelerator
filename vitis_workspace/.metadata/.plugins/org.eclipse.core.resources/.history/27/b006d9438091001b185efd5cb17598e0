/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "mlp_memory.h"
#include "platform.h"
#include "xil_cache.h"
#include "xil_exception.h"
#include "xil_printf.h"
#include "xgpio.h"
#include "xllfifo.h"
#include "xparameters.h"
#include "xstatus.h"
#include "xstreamer.h"

#define FIFO_TIMEOUT_VALUE 1<<10;

XGpio gpioInstance;

XLlFifo rtlIpFifoInstance;
XLlFifo hlsIpFifoInstance;

uint32_t result[64] = {0};

void compute_via_fifo(XLlFifo *fifoInstancePtr, uint32_t *[]weight, uint32_t *data) {
	int i;
	int fifoTimeoutCnt = FIFO_TIMEOUT_VALUE;
	for (i = 0; i < sizeof(*weight) / sizeof(uint32_t); i++) {
		XLlFifo_TxPutWord(fifoInstancePtr, weight[i]);
	}
	for (i = 0; i < sizeof(*data) / sizeof(uint32_t); i++) {
		XLlFifo_TxPutWord(fifoInstancePtr, *data[i]);
	}
	XLlFifo_iTxSetLen(fifoInstance, (sizeof(*weight) + sizeof(*data)) / sizeof(uint32_t) * 4);
	while(!XLlFifo_IsTxDone(fifoInstance)) {}
	while(!XLlFifo_iRxOccupancy(fifoInstance)) {
		fifoTimeoutCnt--;
		if (fifoTimeoutCnt == 0) {
			break;
		}
	}
//	uint32_t fifoReceiveLength = XLlFifo_iRxGetLen(&fifoInstance) / 4;
	for (i = 0; i < sizeof(*data) / sizeof(uint32_t) / 2; i++) {
		xil_printf("d = %u\r\n", XLlFifo_RxGetWord(&fifoInstance));
	}
}

int main()
{
    init_platform();

    XGpio_Config *gpioConfig;
    gpioConfig = XGpio_LookupConfig(XPAR_AXI_GPIO_0_DEVICE_ID);
    XGpio_CfgInitialize(&gpioInstance, gpioConfig, gpioConfig->BaseAddress);
    XGpio_SetDataDirection(&gpioInstance, 1, 0);

    XLlFifo_Config *rtlIpFifoConfig;
    rtlIpFifoConfig = XLlFfio_LookupConfig(XPAR_AXI_FIFO_0_DEVICE_ID);
    XLlFifo_CfgInitialize(&rtlIpFifoInstance, rtlIpFifoConfig, rtlIpFifoConfig->BaseAddress);
    XLlFifo_IntClear(&rtlIpFifoInstance, 0xffffffff);

    XLlFifo_Config *hlsIpFifoConfig;
    hlsIpFifoConfig = XLlFfio_LookupConfig(XPAR_AXI_FIFO_1_DEVICE_ID);
    XLlFifo_CfgInitialize(&hlsIpFifoInstance, hlsIpFifoConfig, hlsIpFifoConfig->BaseAddress);
    XLlFifo_IntClear(&hlsIpFifoInstance, 0xffffffff);

    print("Hello World\r\n");
	XGpio_DiscreteWrite(&gpioInstance, 1, 0b00000001);

	compute_via_fifo(&rtlIpFifoInstance, mlp_weight, mlp_data);

    cleanup_platform();
    return 0;
}
